[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Book of Exploratory Data Analysis (EDA)",
    "section": "",
    "text": "Welcome\nThis “book”, Book of Exploratory Data Analysis (EDA), is actually the organized lecture notes of the course MEF BDA 503.\nMaterials will progressively emerge…\nLatest update in 2023-11-23"
  },
  {
    "objectID": "fundamentals.html",
    "href": "fundamentals.html",
    "title": "Fundamentals",
    "section": "",
    "text": "This chapter covers the fundamental topics of Exploratory Data Analysis. These are\n\nData Manipulation: Taking raw data and creating analyses.\nData Visualization: Visualizing findings from the data.\nReporting: Combining all the findings into a single cohesive report.\nInteractive Reporting (Dashboards): Self-exploring analyses and outcomes.\n\nTo achieve these skills following fundamental R packages are used.\n\ndplyr for data manipulation\nggplot2 for data visualization\nquarto for reporting (alternatively use rmarkdown)\nshiny for interactive dashboarding\n\nFollowing sections provide guidance and examples on these packages in the context of Exploratory Data Analysis. There are many extensions and further packages to consider. However, in order for Fundamentals chapter to stay “fundamental” these topics are moved to Advanced chapter."
  },
  {
    "objectID": "base-r.html#brief-history-of-r",
    "href": "base-r.html#brief-history-of-r",
    "title": "1  Base R",
    "section": "1.1 Brief History of R",
    "text": "1.1 Brief History of R\n\nCreated by Ross Ithaka and Robert Gentlemen of University of Auckland in 1993. It was derived from commercial S programming language (no kidding) which was created in 1976.\nVersion 1.0.0 is released in 2000. Current version is 4.1.1.\nIn 2017, CRAN (official package manager) had more than 10,000 packages. Today it has 18,214 packages on CRAN.\nRanked as the 9th most popular language in TIOBE index as of September 2021.\n\n\n1.1.1 Sources\n\nhttps://blog.revolutionanalytics.com/2020/07/the-history-of-r-updated-for-2020.html\nhttps://en.wikipedia.org/wiki/R_(programming_language)\nhttps://bookdown.org/rdpeng/rprogdatascience/history-and-overview-of-r.html\nhttps://cran.r-project.org/web/packages/\nhttps://www.tiobe.com/tiobe-index/"
  },
  {
    "objectID": "base-r.html#what-is-there-to-like-r",
    "href": "base-r.html#what-is-there-to-like-r",
    "title": "1  Base R",
    "section": "1.2 What is there to like R?",
    "text": "1.2 What is there to like R?\n(Personal opinions)\n\nOne of the two most powerful scripting languages in data analysis with Python. (Julia, first released in 2012, is an emerging third.)\nSyntax and style focused on more non-computer scientists. (Especially tidyverse)\nExcellently curated and managed package manager (CRAN).\nA powerhouse focused on data analytics. Many packages include implementations of novel research papers which cannot be found elsewhere.\nSupported by a powerful IDE (RStudio).\nLow learning curve for data analysis, visualization, publishing and interactive analysis.\n\nNote: Python and R are not competitors. In many cases they complement each other. It is highly recommended to learn both."
  },
  {
    "objectID": "base-r.html#what-are-the-disadvantages-of-r",
    "href": "base-r.html#what-are-the-disadvantages-of-r",
    "title": "1  Base R",
    "section": "1.3 What are the disadvantages of R?",
    "text": "1.3 What are the disadvantages of R?\n\nNot quite popular as Python in CS community. Support is lagging behind in some areas (especially in cloud computing) compared to Python.\nDespite a very convenient web framework (shiny), not greatly suited for scalable web applications without heavy modifications. (Still a great start)\nParallel computing is not native in R. So, speed can be an issue.\nR keeps data in-memory.\n\nEach disadvantage can be alleviated using a package or a solution. Its benefits far outweigh its disadvantages.\nclass: inverse, center, middle"
  },
  {
    "objectID": "base-r.html#basic-features",
    "href": "base-r.html#basic-features",
    "title": "1  Base R",
    "section": "1.4 Basic Features",
    "text": "1.4 Basic Features\n\nR is a vector based language. When you call a function or do an operation, it is usually done for every member of the vector. (It is a powerful feature which requires some time to learn.)\nMain data types are numeric, character and logical. But factor, integer, date, dttm (date-time) and some other types are also very common.\nMain object types are vector, matrix, data.frame and list.\nAssignment operators are “&lt;-” and “=”. Aside from rare exceptions, they are the same (x &lt;- 5 is the same as x = 5). Please be consistent in its use.\n\n\nx &lt;- 5\nx\n\n[1] 5\n\n\n\nR console is completely interactive. You can run anything line by line."
  },
  {
    "objectID": "base-r.html#data-types",
    "href": "base-r.html#data-types",
    "title": "1  Base R",
    "section": "1.5 Data Types",
    "text": "1.5 Data Types\n\nNumeric (double): 1.33, 5422.22…\n\nThere is also integer: 3, 5, 6…\n\nCharacter (character): “a”, “course”, “pizza”…\nBoolean (logical): Either TRUE or FALSE.\nDate (date) and date-time (dttm): “2020-07-28”, “2020-07-29 14:00:05.12 UTC+3”\n\nThis part is a bit complicated with POSIXct and POSIXt types.\n\nFactor (factor): Numeric levels with labels of any kind.\n\nEncountered rarely in this course."
  },
  {
    "objectID": "base-r.html#object-types",
    "href": "base-r.html#object-types",
    "title": "1  Base R",
    "section": "1.6 Object Types",
    "text": "1.6 Object Types\n\n1.6.1 Vector\nVector is the foundation stone of R object types. A variable with a single value is called “atomic” vector.\nVectors with multiple values can be defined using c() (“combine”) function.\n\nx &lt;- c(\"a\",\"b\",\"c\")\nx\n\n[1] \"a\" \"b\" \"c\"\n\n\nA vector can have only a single data type. R conveniently converts vectors to the most appropriate data type.\n\nx &lt;- c(1,\"hi\",FALSE) ## Vector of numeric, character and logical values\nx ## converted to all character\n\n[1] \"1\"     \"hi\"    \"FALSE\"\n\n\n\n\n1.6.2 Matrix\nMatrix is simply a two dimensional special vector.\n\nmat1&lt;-matrix(1:9, ncol=3, nrow=3)\nmat1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nWe can get a value from a matrix by providing its location as row/column coordinates or by simply by treating it as a vector.\n\nmat1[2,2]\n\n[1] 5\n\nmat1[5]\n\n[1] 5\n\n\n\n\n1.6.3 Data Frame\nData frame object type is still two dimensional but each column can be of a different data type.\n\ndf1 &lt;- data.frame(some_numbers=1:3,\n                  some_names=c(\"Blood\",\"Sweat\",\"Tears\"),\n                  some_logical=c(TRUE,FALSE,TRUE))\ndf1\n\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            2      Sweat        FALSE\n3            3      Tears         TRUE\n\n\nData frames are extremely powerful structures. Most of our work will be on data frames.\nNote: In dplyr package we will see a special version of data frames: tibble.\n\n\n1.6.4 List\nLists are like vectors but they can hold any object (including lists). You can also add names to lists.\n\nlist1 &lt;- list(data_frame = df1,matrix = mat1,vector= x)\nlist1\n\n$data_frame\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            2      Sweat        FALSE\n3            3      Tears         TRUE\n\n$matrix\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n$vector\n[1] \"1\"     \"hi\"    \"FALSE\"\n\n\n\n\n1.6.5 Functions\nFunctions are very useful types as they allow to run reusable code with dynamic inputs. For example, let’s write a function to calculate the area of a triangle.\n\narea_of_triangle &lt;- function(height,base_length){\n  area &lt;- height*base_length/2\n  return(area) ## Return value using return command\n}\n## You can assign the result of a function to a variable\nx &lt;- area_of_triangle(height = 3, base_length = 4) \nx\n\n[1] 6\n\n\n\nRule of thumb is “If you need to copy paste the same code three times, write a function instead.”\nR has thousands of predefined functions to make life easier.\nIf you want to return multiple values return a list.\n\nclass: center, middle, inverse"
  },
  {
    "objectID": "base-r.html#exercises",
    "href": "base-r.html#exercises",
    "title": "1  Base R",
    "section": "1.7 Exercises",
    "text": "1.7 Exercises\nComplete base R document before attempting to solve these.\n\n1.7.1 Temperature Conversion\nWrite a function to convert Fahrenheit to Celsius and Celsius to Fahrenheit.\n(X°C × 9/5) + 32 = Y°F\n\nconvert_temperature &lt;- function(x, F_to_C = TRUE){\n  if(F_to_C){\n    return((x-32)*5/9)\n  }else{\n    return(x*9/5 + 32)\n  }\n}\n\n\nconvert_temperature(30,F_to_C = FALSE)\n\n[1] 86\n\nconvert_temperature(86,F_to_C = TRUE)\n\n[1] 30\n\n\n\n1.7.1.1 Future Value\nWrite a function to calculate the future value of an investment given annually compounding interest over an amount of years.\n\\[FV = X * (1 + i) ^T\\]\n\ncalculate_future_value &lt;- \nfunction(investment, interest, duration_in_years){\n  return(investment * ((1 + interest) ^ duration_in_years)) \n}\n\n\n## 100 units of investments 7% interest rate over 5 years\ncalculate_future_value(\n  investment = 100, interest = 0.07, duration_in_years = 5)\n\n[1] 140.2552\n\n\n\n\n\n1.7.2 Color Hex Code\nWrite a function to randomly generate n color hex codes. You can use letters predefined vector.\n\ngenerate_hex_code &lt;- function(n=1){\n  hex_vec &lt;- c(0:9,letters[1:6])\n  colors &lt;- c()\n  for(i in 1:n){\n    colors &lt;- c(colors,\n      paste0(\"#\",\n      paste0(sample(hex_vec,6,replace=TRUE),collapse=\"\")))\n  }\n  return(colors)\n}\n\n\ngenerate_hex_code(n=3)\n\n[1] \"#364395\" \"#e210ea\" \"#cce007\"\n\n\n\n\n1.7.3 Calculate Probability of Dice\nWrite a function which calculates the probability of getting k sixes in n throws of a die. Hint: Use binomial distribution.\n\nget_prob_dice &lt;- function(k,n){\n  combination &lt;- factorial(n)/(factorial(k) * factorial(n-k))\n  probability &lt;- (1/6)^k * (5/6)^(n-k)\n  return(combination*probability)\n}\n\n\nget_prob_dice(3,5)\n\n[1] 0.03215021\n\n\n\ndbinom(3,5,prob=1/6) ## or simply use dbinom\n\n[1] 0.03215021\n\n\n\n\n1.7.4 Rock, Scissors, Paper\nWrite a rock scissors paper game which computer randomly chooses\n\nrsp_game &lt;- function(user,choices=c(\"rock\",\"scissors\",\"paper\")){\n  if(!(user %in% choices))\n    return(\"Choose only rock, scissors or paper as input.\") \n  response &lt;- sample(choices,1)\n  if(user == response)\n    return(\"I chose the same. Tie!\")\n  if((user == \"rock\" & response == \"scissors\") | \n     (user == \"scissors\" & response == \"paper\") |\n     (user == \"paper\" & response == \"rock\")){\n    return(paste0(\"I chose \", response, \". You win!\"))\n  }else{\n    return(paste0(\"I chose \", response, \". You lose!\"))\n  }\n}\n\n\nrsp_game(\"rock\")\n\n[1] \"I chose scissors. You win!\"\n\n\nCheck course webpage for more exercises!"
  },
  {
    "objectID": "base-r.html#other-links",
    "href": "base-r.html#other-links",
    "title": "1  Base R",
    "section": "1.8 Other Links",
    "text": "1.8 Other Links\n\nBase R Cheat Sheet"
  },
  {
    "objectID": "base-r-in-detail.html",
    "href": "base-r-in-detail.html",
    "title": "2  Base R in Detail",
    "section": "",
    "text": "3 Briefly About R\nR is a scripting language1 with the main purpose of conducting tasks related to statistics, mainly by academics for the academics. Though, these days things got slightly out of hand and R became one of the most popular languages especially in the field of “data science”. The biggest advantage of R is the huge package (R equivalent of “There is an app for that”) and developer support.\nOther main points to know about R are as follows.\nA list of resources with links and explanations will be given at the end of this document.\nThis part lays out the very basics of R. Content is mainly about data types (numeric, character and logical), object types (vectors, matrices, lists and ) and basic operations. Before starting check the following tips that can be useful.\n##Value Assignment, Vectors and Data Types\nValues can be defined on variables with the assignment operator &lt;- or =.3 For example let’s assign a numeric value to the variable x.4 You don’t need to define a variable, assigning a value is enough.\nx &lt;- 522\nx\n\n[1] 522\nYour can also assign character strings,\nx &lt;- \"BDA503\"\nx\n\n[1] \"BDA503\"\nand logical. (There is also a factor type, but it is skipped for now.)\nx &lt;- FALSE\nx\n\n[1] FALSE"
  },
  {
    "objectID": "base-r-in-detail.html#object-types",
    "href": "base-r-in-detail.html#object-types",
    "title": "2  Base R in Detail",
    "section": "5.1 Object Types",
    "text": "5.1 Object Types\nIn this part, object types such as vector, matrix, data.frame and list are explained. Although this is not a complete list (e.g. array is another object type) and object is a more general concept, these object types are mostly sufficient at beginner and intermediate levels.\n\n5.1.1 Vector\nMost basic data structure is a vector. You can create a simple vector with c() (combine).\n\nx &lt;- c(5,2,2)\nx\n\n[1] 5 2 2\n\n\nYou can change any value in a vector by defining its index. Index starts with 1.\n\nx[2] &lt;- 7\nx\n\n[1] 5 7 2\n\n\nYou can omit a value by putting a negative index.\n\nx[-2] &lt;- 0\nx\n\n[1] 0 7 0\n\n\nR handles out of bounds index values and returns NA.\n\nx[5] &lt;- 10\nx\n\n[1]  0  7  0 NA 10\n\n\nYou can define multiple index values and define rules to choose the index.\n\nx2 &lt;- 10:19 #This is a special representation that generates a vector from a (10) to b (19).\nx2[c(1,3,7)] #Return 1st, 3rd and 7th values.\n\n[1] 10 12 16\n\nx2[(1:3)] #Return 1st to 3rd values.\n\n[1] 10 11 12\n\n\n\nx2[x2&gt;15] #Return the index values where x2 &gt; 15\n\n[1] 16 17 18 19\n\nx2&gt;15\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n\n\nYou can give names instead of index values.\n\nx3&lt;-c(1,2,3)\nnames(x3)&lt;-c(\"a1\",\"b2\",\"c3\")\nx3\n\na1 b2 c3 \n 1  2  3 \n\nx3[\"b2\"]\n\nb2 \n 2 \n\n\nIf you try to combine different data types, R will transform them to characters or numeric.\n\nc(5,FALSE)\n\n[1] 5 0\n\nc(5,FALSE,\"BDA503\")\n\n[1] \"5\"      \"FALSE\"  \"BDA503\"\n\n\nMathematical operations can be easily done with vectors.\n\nvec1 &lt;- 1:5 # This is a special representation of consecutive numbers.\nvec1\n\n[1] 1 2 3 4 5\n\nvec2 &lt;- vec1 * 2\nvec2\n\n[1]  2  4  6  8 10\n\nvec1 + vec2\n\n[1]  3  6  9 12 15\n\n\nVectors need not to be of equal size (though recommended).\n\nvec1 &lt;- 1:6\nvec2 &lt;- 3:5\nvec1 + vec2\n\n[1]  4  6  8  7  9 11\n\n\n\n\n5.1.2 Matrix\nMatrix is more like a stylized vector in a rectangular (matrix) format with some special functions.\n\nmat1&lt;-matrix(1:9, ncol=3, nrow=3)\nmat1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nYou can manipulate a value of a matrix by giving its index value.\n\nmat1[2,2] &lt;- -10\nmat1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2  -10    8\n[3,]    3    6    9\n\n\nHere are some basic matrix operations.\n\nmat2 &lt;- matrix(c(0,4,1,2,0,0,0,0,1),ncol=3)\nmat2\n\n     [,1] [,2] [,3]\n[1,]    0    2    0\n[2,]    4    0    0\n[3,]    1    0    1\n\nt(mat2) # Transpose of a matrix\n\n     [,1] [,2] [,3]\n[1,]    0    4    1\n[2,]    2    0    0\n[3,]    0    0    1\n\nsolve(mat2) # Inverse of a matrix\n\n     [,1]  [,2] [,3]\n[1,]  0.0  0.25    0\n[2,]  0.5  0.00    0\n[3,]  0.0 -0.25    1\n\ndet(mat2) # Determinant value of a matrix\n\n[1] -8\n\ndim(mat2) # Dimensions of a matrix\n\n[1] 3 3\n\nnrow(mat2) # Number of rows of a matrix\n\n[1] 3\n\nncol(mat2) # Number of columns of a matrix\n\n[1] 3\n\ndiag(mat2) # Diagonal values of a matrix\n\n[1] 0 0 1\n\neigen(mat2) # Eigenvalues and eigenvectors of a matrix\n\neigen() decomposition\n$values\n[1]  2.828427 -2.828427  1.000000\n\n$vectors\n          [,1]       [,2] [,3]\n[1,] 0.5505553  0.5708950    0\n[2,] 0.7786028 -0.8073674    0\n[3,] 0.3011087 -0.1491200    1\n\nmat1 %*% mat2 # Matrix multiplication\n\n     [,1] [,2] [,3]\n[1,]   23    2    7\n[2,]  -32    4    8\n[3,]   33    6    9\n\n\nYou can also do vector operations with matrices.\n\nmat1 + mat2\n\n     [,1] [,2] [,3]\n[1,]    1    6    7\n[2,]    6  -10    8\n[3,]    4    6   10\n\nmat1 - mat2\n\n     [,1] [,2] [,3]\n[1,]    1    2    7\n[2,]   -2  -10    8\n[3,]    2    6    8\n\nmat1 / mat2\n\n     [,1] [,2] [,3]\n[1,]  Inf    2  Inf\n[2,]  0.5 -Inf  Inf\n[3,]  3.0  Inf    9\n\nmat1 * mat2\n\n     [,1] [,2] [,3]\n[1,]    0    8    0\n[2,]    8    0    0\n[3,]    3    0    9\n\n\nYou can do operations with matrices and vectors together. Then matrix is treated like a vector with the index column order (i.e. starts from top to bottom, then goes to next column).\n\nmat3 &lt;- matrix(1:9,ncol=3)\nmat3\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nvec &lt;- c(0,1,0)\nmat3 + vec\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    3    6    9\n[3,]    3    6    9\n\nmat3 * vec\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    2    5    8\n[3,]    0    0    0\n\n\nYou can name rows and columns of a matrix.\n\nrownames(mat3) &lt;- c(\"a\",\"b\",\"c\")\ncolnames(mat3) &lt;- c(\"y1\",\"y2\",\"y3\")\nmat3\n\n  y1 y2 y3\na  1  4  7\nb  2  5  8\nc  3  6  9\n\n\n\n\n5.1.3 Data Frame\nData frame is the most useful object type. Unlike matrix and vector you can define different data types for different columns.\n\ndf1 &lt;- data.frame(some_numbers=1:3,some_names=c(\"Blood\",\"Sweat\",\"Tears\"),some_logical=c(TRUE,FALSE,TRUE))\ndf1\n\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            2      Sweat        FALSE\n3            3      Tears         TRUE\n\n\nYou can see the details of an object (in this case the data frame) using str() function.\n\nstr(df1)\n\n'data.frame':   3 obs. of  3 variables:\n $ some_numbers: int  1 2 3\n $ some_names  : chr  \"Blood\" \"Sweat\" \"Tears\"\n $ some_logical: logi  TRUE FALSE TRUE\n\n\nYou easily can do operations on a single column using $.\n\ndf1$some_numbers\n\n[1] 1 2 3\n\ndf1$some_names\n\n[1] \"Blood\" \"Sweat\" \"Tears\"\n\ndf1$some_logical\n\n[1]  TRUE FALSE  TRUE\n\ndf1$some_numbers &lt;- df1$some_numbers^2\ndf1\n\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            4      Sweat        FALSE\n3            9      Tears         TRUE\n\n\nThere are many example data sets in base R and packages in data.frame format. For instance, EuStockMarkets contains the closing prices of DAX (Germany), SMI (Switzerland), CAC (French), FTSE (UK) stock market indices.\n\nhead(EuStockMarkets) #head() function shows the first rows of a data frame.\n\n         DAX    SMI    CAC   FTSE\n[1,] 1628.75 1678.1 1772.8 2443.6\n[2,] 1613.63 1688.5 1750.5 2460.2\n[3,] 1606.51 1678.6 1718.0 2448.2\n[4,] 1621.04 1684.1 1708.1 2470.4\n[5,] 1618.16 1686.6 1723.1 2484.7\n[6,] 1610.61 1671.6 1714.3 2466.8\n\n\n\n\n5.1.4 List\nLists can hold many objects (including lists).\n\nlist1 &lt;- list(df1,mat3,vec2)\nlist1\n\n[[1]]\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            4      Sweat        FALSE\n3            9      Tears         TRUE\n\n[[2]]\n  y1 y2 y3\na  1  4  7\nb  2  5  8\nc  3  6  9\n\n[[3]]\n[1] 3 4 5\n\nlist1[[1]]\n\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            4      Sweat        FALSE\n3            9      Tears         TRUE\n\n\nYou can name the objects and call them with the names if you like.\n\nlist1 &lt;- list(some_df=df1,some_mat=mat3,vec2)\nlist1\n\n$some_df\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            4      Sweat        FALSE\n3            9      Tears         TRUE\n\n$some_mat\n  y1 y2 y3\na  1  4  7\nb  2  5  8\nc  3  6  9\n\n[[3]]\n[1] 3 4 5\n\nlist1$some_df\n\n  some_numbers some_names some_logical\n1            1      Blood         TRUE\n2            4      Sweat        FALSE\n3            9      Tears         TRUE\n\n\nLists are frequently used in functions as parameter set holders and for other purposes."
  },
  {
    "objectID": "base-r-in-detail.html#useful-base-r-functions",
    "href": "base-r-in-detail.html#useful-base-r-functions",
    "title": "2  Base R in Detail",
    "section": "5.2 Useful Base R Functions",
    "text": "5.2 Useful Base R Functions\nRemember, you can always look for help for a function using ?function_name or help(function_name). This is not an exhaustive list, there are many other fantastic functions in base R.\n\nrep(x=5,times=10) #Repeat a value or a vector\n\n [1] 5 5 5 5 5 5 5 5 5 5\n\nseq(from=5,to=10,length.out=11) #Create a sequence with the given number of equidistant elements\n\n [1]  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0\n\nseq(from=5,to=10,by=0.25) #Create a sequence with the given increment value\n\n [1]  5.00  5.25  5.50  5.75  6.00  6.25  6.50  6.75  7.00  7.25  7.50  7.75\n[13]  8.00  8.25  8.50  8.75  9.00  9.25  9.50  9.75 10.00\n\nvec1 &lt;- sample(x=1:10,size=10,replace=FALSE) #Pick 10 numbers randomly without replacement (Note: Your results might differ from this document due to randomness.)\nvec1\n\n [1]  8  7  3  5  4  1  2  9 10  6\n\nprint(vec1/2) #Print the outputs of an object. Useful for later.\n\n [1] 4.0 3.5 1.5 2.5 2.0 0.5 1.0 4.5 5.0 3.0\n\nrev(vec1) #Reverse of a vector\n\n [1]  6 10  9  2  1  4  5  3  7  8\n\nlength(vec1) #Number of elements of a vector\n\n[1] 10\n\nvec1 %% 2 #Mod 2 of the elements in the vector\n\n [1] 0 1 1 1 0 1 0 1 0 0\n\nmin(vec1) #Minimum value of the vector\n\n[1] 1\n\nmax(vec1) #Maximum value of the vector\n\n[1] 10\n\nfactorial(vec1) #Factorial value of all elements of a vector (You can use a single value as well)\n\n [1]   40320    5040       6     120      24       1       2  362880 3628800\n[10]     720\n\nsum(vec1) #Sum of all the values in the vector\n\n[1] 55\n\ncumsum(vec1) #Cumulative sum of all the values in the vector\n\n [1]  8 15 18 23 27 28 30 39 49 55\n\nprod(vec1) #Product (multiplication) of all the values in the vector\n\n[1] 3628800\n\ncumprod(vec1) #Cumulative product of all the values in the vector\n\n [1]       8      56     168     840    3360    3360    6720   60480  604800\n[10] 3628800\n\nlog(vec1) #Natural logarithm of the values in the vector\n\n [1] 2.0794415 1.9459101 1.0986123 1.6094379 1.3862944 0.0000000 0.6931472\n [8] 2.1972246 2.3025851 1.7917595\n\nlog(vec1,base=2) #Logarithm of base 2.\n\n [1] 3.000000 2.807355 1.584963 2.321928 2.000000 0.000000 1.000000 3.169925\n [9] 3.321928 2.584963\n\nexp(vec1) #Exponential values of a vector (e=2.71...)\n\n [1]  2980.957987  1096.633158    20.085537   148.413159    54.598150\n [6]     2.718282     7.389056  8103.083928 22026.465795   403.428793\n\nvec1^2 #Power of 2\n\n [1]  64  49   9  25  16   1   4  81 100  36\n\nsqrt(vec1) #Square root\n\n [1] 2.828427 2.645751 1.732051 2.236068 2.000000 1.000000 1.414214 3.000000\n [9] 3.162278 2.449490\n\nvecx &lt;- c(1,3,5,7) #Define another vector\nvecy &lt;- c(8,6,4,2) #Define another vector\npmax(vecx,vecy) #Maximum of each corresponding element of two (or more) vectors\n\n[1] 8 6 5 7\n\npmin(vecx,vecy) #Minimum of each corresponding element of two (or more) vectors\n\n[1] 1 3 4 2\n\nmax(vecx,vecy) #Difference between max and pmax\n\n[1] 8\n\nvec1 &lt;- c(-1,0.5,-1.2,4/3)\nvec1\n\n[1] -1.000000  0.500000 -1.200000  1.333333\n\nabs(vec1) #Absolute value\n\n[1] 1.000000 0.500000 1.200000 1.333333\n\nround(vec1,digits = 1) #Round a value to a number of digits\n\n[1] -1.0  0.5 -1.2  1.3\n\nfloor(vec1) #Round down value of vector\n\n[1] -1  0 -2  1\n\nceiling(vec1) #Round up value of vector\n\n[1] -1  1 -1  2\n\nround(0.5) #Interesting case about rounding. Compare with below.\n\n[1] 0\n\nround(1.5) #Interesting case about rounding. Compare with above.\n\n[1] 2\n\nvec_table&lt;-sample(letters[1:5],20,replace=TRUE) #Another vector for frequency tables. letters is a predefined object in R.\nvec_table\n\n [1] \"c\" \"b\" \"a\" \"e\" \"c\" \"c\" \"d\" \"c\" \"c\" \"b\" \"e\" \"c\" \"d\" \"e\" \"a\" \"e\" \"b\" \"b\" \"d\"\n[20] \"b\"\n\ntable(vec_table) #Easily do a frequency table.\n\nvec_table\na b c d e \n2 5 6 3 4 \n\n\n\n5.2.1 Sorting, Ranking and Ordering\n\nvec2 &lt;- sample(x=11:20,size=10,replace=FALSE)\nvec2\n\n [1] 12 16 13 14 17 19 18 15 20 11\n\nsort(vec2) #Sort the values in the vector\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\nrank(vec2) #Rank of the values in the vector\n\n [1]  2  6  3  4  7  9  8  5 10  1\n\norder(vec2) #Returns the index values (ascending) of the sorted vector.\n\n [1] 10  1  3  4  8  2  5  7  6  9\n\norder(vec2,decreasing=TRUE) #Returns the index values (descending) of the sorted vector.\n\n [1]  9  6  7  5  2  8  4  3  1 10\n\n\n\n\n5.2.2 Logical operators\nThese operators return TRUE or FALSE values. They are especially useful to\n\nvec1 &lt;- 1:10\nvec1\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nvec1 &gt; 5 #Logical (TRUE/FALSE) result of elements greater than 5.\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nvec1[vec1 &gt; 5]\n\n[1]  6  7  8  9 10\n\nvec1 &gt;= 5 #Logical result of elements greater than or equal to 5.\n\n [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nvec1[vec1 &gt;= 5]\n\n[1]  5  6  7  8  9 10\n\nvec1 &lt; 5 #Logical result of elements less than 5.\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\nvec1 &lt;= 5 #Logical result of elements less than or equal to 5.\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n\nvec1 &gt; 5 & vec1 &lt; 9 #and (&) operator\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\nvec1[vec1 &gt; 5 & vec1 &lt; 9]\n\n[1] 6 7 8\n\nvec1 &lt; 5 | vec1 &gt; 9 #or (|) operator\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE\n\nvec1[vec1 &lt; 5 | vec1 &gt; 9]\n\n[1]  1  2  3  4 10\n\n\nYou can also do element by element comparisons of two vectors.\n\neu_df&lt;- data.frame(EuStockMarkets[1:20,]) #Take the first 20 rows of the stock market index data\neu_df_returns &lt;- data.frame(DAX=100*(round(eu_df$DAX[-1]/eu_df$DAX[-20],4)-1),\n                            CAC=100*(round(eu_df$CAC[-1]/eu_df$CAC[-20],4)-1)) #Calculate the index percentage returns\neu_df_returns$DAX_or_CAC &lt;- eu_df_returns$DAX &gt;= eu_df_returns$CAC #If the return of DAX is larger than or equal to CAC return TRUE\neu_df_returns\n\n     DAX   CAC DAX_or_CAC\n1  -0.93 -1.26       TRUE\n2  -0.44 -1.86       TRUE\n3   0.90 -0.58       TRUE\n4  -0.18  0.88      FALSE\n5  -0.47 -0.51       TRUE\n6   1.25  1.18       TRUE\n7   0.58  1.32      FALSE\n8  -0.29 -0.19      FALSE\n9   0.64  0.02       TRUE\n10  0.12  0.31      FALSE\n11 -0.58 -0.24      FALSE\n12 -0.51  0.15      FALSE\n13 -0.52 -0.03      FALSE\n14  0.20  0.34      FALSE\n15  0.18 -0.04       TRUE\n16  0.27  0.35      FALSE\n17 -0.66  0.52      FALSE\n18 -0.48  0.11      FALSE\n19 -0.52 -0.70       TRUE\n\n\n\n\n5.2.3 Statistics Functions\nSome functions are predefined to facilitate statistics calculations.\n\nvec1 &lt;- sample(1:20,50,replace=TRUE) #Sample 50 numbers from values between 1 to 20\nvec1\n\n [1]  1  7  6 20 19 13  1 14 15 18  1  3  2  8 14  8 19  7  6  5 14 11  4 19 10\n[26]  2  5 10 12 12  6  8 10  6  7  3  1 10  1 19 16 13 14  1  8  9  3  4  8  6\n\nmean(vec1) #Mean\n\n[1] 8.78\n\nmedian(vec1) #Median\n\n[1] 8\n\nvar(vec1) #Variance\n\n[1] 32.1751\n\nsd(vec1) #Standard deviation\n\n[1] 5.67231\n\nquantile(vec1) #Quantile values\n\n   0%   25%   50%   75%  100% \n 1.00  4.25  8.00 13.00 20.00 \n\nquantile(vec1,0.65) #Quantile value of a specific percentage\n\n65% \n 10 \n\nsummary(vec1) #An aggregate summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    4.25    8.00    8.78   13.00   20.00 \n\ncor(matrix(sample(1:20,50,replace=TRUE),ncol=5)) #Correlation matrix\n\n           [,1]       [,2]        [,3]       [,4]        [,5]\n[1,]  1.0000000 -0.2559994  0.14870542  0.3206040  0.64079831\n[2,] -0.2559994  1.0000000 -0.11294628 -0.3952173  0.21003398\n[3,]  0.1487054 -0.1129463  1.00000000 -0.2477775 -0.07265325\n[4,]  0.3206040 -0.3952173 -0.24777751  1.0000000 -0.21931239\n[5,]  0.6407983  0.2100340 -0.07265325 -0.2193124  1.00000000\n\ncov(matrix(sample(1:20,50,replace=TRUE),ncol=5)) #Covariance matrix\n\n          [,1]       [,2]      [,3]       [,4]       [,5]\n[1,] 11.166667  -4.611111  5.555556  -9.444444  14.000000\n[2,] -4.611111  24.455556 16.400000  22.666667 -18.600000\n[3,]  5.555556  16.400000 47.955556   5.777778   6.066667\n[4,] -9.444444  22.666667  5.777778  32.444444 -27.333333\n[5,] 14.000000 -18.600000  6.066667 -27.333333  39.955556\n\n\nThere are also random number generators and functions related with densities and cdf’s of different distributions. Here are the functions for normal distribution.\n\nrnorm(5,mean=0,sd=1) #Generate 5 normally distributed random numbers with mean 0 and sd 1\n\n[1] -0.2539027 -0.2149014  0.4441155  1.1664932  0.6277736\n\ndnorm(x=0,mean=0,sd=1) #Density value of a point in a normal distribution with mean 0 and sd 1\n\n[1] 0.3989423\n\npnorm(q=1.96,mean=0,sd=1) #Cumulative distribution value of a point in a normal distribution with mean 0 and sd 1\n\n[1] 0.9750021\n\nqnorm(p=0.975,mean=0,sd=1) #Quantile value of a point in a normal distribution with mean 0 and sd 1\n\n[1] 1.959964\n\n\nOther distributions include dpois (poisson), dbinom (binomial), dgeom (geometric), dunif (uniform), dgamma (gamma), dexp (exponential), dchisq (chi-squared), dt (t distribution), df (F distribution), dcauchy (cauchy),dnbinom (negative binomial), dhyper (hypergeometric), dlnorm (lognormal), dbeta (beta), dlogis (logistic) and dweibull (weibull) with the same format (e.g. rpois generates random poisson numbers).\n\n5.2.3.1 Random Number Generation\nTip: For reproducibility use set.seed. It will set the randomness seed to a value and random number generation will be the same for (almost) everyone.\n\nset.seed(522)\nrnorm(10)\n\n [1]  0.52028245  0.75354770 -0.80932517 -0.42112173  0.08458416  1.80153605\n [7]  1.25071091 -0.31097287  1.16377544 -0.67728655\n\n\nLet’s run it a second time by resetting the seed. The output will be the same.\n\nset.seed(522)\nrnorm(10)\n\n [1]  0.52028245  0.75354770 -0.80932517 -0.42112173  0.08458416  1.80153605\n [7]  1.25071091 -0.31097287  1.16377544 -0.67728655\n\n\nSee, the same output happens when randomness seed is restarted at the same value.\n\n\n\n5.2.4 Conversion between data and object types\nYou can convert numeric to character, logical to numeric using functions starting with as. and check the type of the object with is. or typeof().\n\nvec1&lt;-c(1,2,3,4)\nis.numeric(vec1) #Is the vector numeric?\n\n[1] TRUE\n\nas.character(vec1) #Make the vector character?\n\n[1] \"1\" \"2\" \"3\" \"4\"\n\ntypeof(vec1) #What is the type?\n\n[1] \"double\"\n\nvec2&lt;-c(\"a\",\"b\",\"c\",\"d\")\ntypeof(vec2)\n\n[1] \"character\"\n\nas.numeric(vec2) # oops\n\nWarning: NAs introduced by coercion\n\n\n[1] NA NA NA NA\n\nvec3&lt;-c(TRUE,FALSE,TRUE,FALSE)\nis.logical(vec3)\n\n[1] TRUE\n\nas.numeric(vec3)\n\n[1] 1 0 1 0\n\nas.character(vec3)\n\n[1] \"TRUE\"  \"FALSE\" \"TRUE\"  \"FALSE\"\n\nvec3*1 #Convert to numeric with multiplication\n\n[1] 1 0 1 0\n\ndf1&lt;-data.frame(a=c(1,2,3),b=c(4,5,6),c=c(7,8,9))\nas.matrix(df1) #Convert to matrix\n\n     a b c\n[1,] 1 4 7\n[2,] 2 5 8\n[3,] 3 6 9\n\nmat1 &lt;- matrix(1:9,ncol=3)\nas.data.frame(mat1)\n\n  V1 V2 V3\n1  1  4  7\n2  2  5  8\n3  3  6  9\n\n\n\n\n5.2.5 String Manipulation\n\nstrvec1&lt;-c(\"BDA503\",\"FE511\",\"IE422\")\ngrep(\"ETM\",strvec1) #Index values of character strings including FE\n\ninteger(0)\n\ngrepl(\"ETM\",strvec1) #TRUE FALSE statements of character strings including FE\n\n[1] FALSE FALSE FALSE\n\ngsub(\"ETM\",\"IE\",strvec1) #Replacing strings\n\n[1] \"BDA503\" \"FE511\"  \"IE422\" \n\nnchar(strvec1) #Return number of characters in string\n\n[1] 6 5 5\n\nsubstr(strvec1,start=1,stop=2) #Trim the string from start to stop\n\n[1] \"BD\" \"FE\" \"IE\"\n\npaste(\"ETM\",\"522\",sep=\"-\") #Concatenate two strings with a separator.\n\n[1] \"ETM-522\"\n\npaste0(\"ETM\",\"522\") #Concatenate two strings without a separator, equivalent of paste(.,sep=\"\").\n\n[1] \"ETM522\"\n\npaste(strvec1,collapse=\"+\") #Concatenate elements of a vector with a collapse character.\n\n[1] \"BDA503+FE511+IE422\""
  },
  {
    "objectID": "base-r-in-detail.html#conditionals-if-else",
    "href": "base-r-in-detail.html#conditionals-if-else",
    "title": "2  Base R in Detail",
    "section": "5.3 Conditionals (If-Else)",
    "text": "5.3 Conditionals (If-Else)\nConditionals are straightforward. If a statement returns TRUE, then the code chunk defined by the brackets are executed.\n\ncourse_name &lt;- \"BDA503\" #Define the course name.\n\nif(course_name==\"BDA503\"){ #If the course name is FE522.\n  print(\"Correct course.\")\n}\n\n[1] \"Correct course.\"\n\n\nIt is possible to execute some other code chunk if the statement is FALSE with else and add other conditionals using else if.\n\ncourse_name &lt;- \"FE511\" #Define the course name.\n\nif(course_name==\"BDA503\"){ #If the course name is FE522.\n  print(\"Correct course.\")\n}else if(grepl(\"ETM\",course_name)){ #If the course name include FE but it is not FE522.\n  print(\"Wrong course but close.\")\n}else{ #If none of the above\n  print(\"Wrong course.\")\n}\n\n[1] \"Wrong course.\"\n\n\nif conditional statements accept only one value. If you want to check for all elements in a vector use ifelse().\n\ncourse_name&lt;-c(\"BDA503\",\"FE511\",\"IE422\")\nifelse(course_name==\"BDA503\",\"Correct Course\",\"Wrong Course\")\n\n[1] \"Correct Course\" \"Wrong Course\"   \"Wrong Course\""
  },
  {
    "objectID": "base-r-in-detail.html#loops",
    "href": "base-r-in-detail.html#loops",
    "title": "2  Base R in Detail",
    "section": "5.4 Loops",
    "text": "5.4 Loops\nAlthough you are warned that R works slowly with loops (especially loops within loops), it is usually inevitable to use the loops.\n\n5.4.1 For\nFor loops consist of a loop variable and a scope.\n\nval&lt;-2\nfor(i in 1:3){ #Define the loop variable and scope\n  print(val^i)\n}\n\n[1] 2\n[1] 4\n[1] 8\n\n\nScope does not need to be numbers. For returns whatever in the scope in index order\n\nfor(i in c(\"BDA503\",\"FE511\",\"IE422\")){\n  print(i)\n}\n\n[1] \"BDA503\"\n[1] \"FE511\"\n[1] \"IE422\"\n\n\n\n\n5.4.2 While\nWhile is a less frequently used loop type. It repeats the code while a condition is met. It first checks the condition. When it is not satisfied, it skips the code chunk.\n\nx &lt;- 0\nwhile(x &lt; 3){\n  x &lt;- x+1\n  print(paste0(\"x is \",x,\" x is not at the desired level. Desired level is above 3.\"))\n}\n\n[1] \"x is 1 x is not at the desired level. Desired level is above 3.\"\n[1] \"x is 2 x is not at the desired level. Desired level is above 3.\"\n[1] \"x is 3 x is not at the desired level. Desired level is above 3.\""
  },
  {
    "objectID": "base-r-in-detail.html#functions",
    "href": "base-r-in-detail.html#functions",
    "title": "2  Base R in Detail",
    "section": "5.5 Functions",
    "text": "5.5 Functions\nR lets you to define functions easily, with a flexible format. Here are some examples.\n\nfun1&lt;-function(par1=\"This is a default value\"){\n  print(par1)\n}\n\nIf there is a default value defined on the function you do not need to enter any value if you are comfortable with.\n\nfun1()\n\n[1] \"This is a default value\"\n\n\nYou can change the parameters when you call the function.\n\nfun1(par1=\"Congratulations, you changed the parameter.\")\n\n[1] \"Congratulations, you changed the parameter.\"\n\n\nIf you are careful about the order of your entered parameters, you do not need to write the parameter name.\n\nfun1(\"Wow you do it like a pro without parameter names!\")\n\n[1] \"Wow you do it like a pro without parameter names!\"\n\n\nHere is another simple example. Let’s calculate the future value of an initial investment compounded interest.\n\ncalc_future_value&lt;-function(present_value,interest_rate,years){\n  return(present_value*(1+interest_rate)^years)\n}\ncalc_future_value(100,0.05,5)\n\n[1] 127.6282\n\n\nPut a technical analysis."
  },
  {
    "objectID": "base-r-in-detail.html#input-output-io-operations",
    "href": "base-r-in-detail.html#input-output-io-operations",
    "title": "2  Base R in Detail",
    "section": "5.6 Input Output (I/O) Operations",
    "text": "5.6 Input Output (I/O) Operations\nReading from and writing to data files will be unavoidable at some point. While it is useful to know the fundamental functions, I/O operations usually require experience. In other words, you will face many challenges to read a table from an excel file or writing outputs to txt files. Though, it gets easier\nFrequently use the help of these functions to understand their inner workings. For xlsx files and other data types (e.g. JSON, SQL) there are packages.\n\nsetwd(\"~/some_path\") #Set working directory path.\ngetwd() #Get the working directory path.\nscan(file=\"some_data_file.txt\") #Read data from file.\nread.table(file=\"some_data_file.csv\") #Read xls or csv files but not xlsx files. You will need a package for that.\nsource(\"path_to_some_r_file/some_r_file.r\")\nwrite(\"writing_something\",file=\"some_document_file.txt\")\nwrite.table() #Writing to csv or xls. Similar logic to to read.table with opposite function.\nfile.choose() #Manually choosing a file from computer. You can use it like read.table(file.choose())\ndir(path=\"some_path\") #Files in the path directory.\n\nImportant: Defining paths in R can be different in Windows and Mac. See this link for more detail.\n\ndir(\"C:/Desktop/\") #Windows style 1\ndir(\"C:\\\\Desktop\\\\\") #Windows style 2\ndir(\"~/Documents/\") #Mac and Linux style. Might work for Windows too.\n\nTip: Sometimes, R reads columns containing characters as factor data type. It is not covered in this tutorial and it is tough to handle and convert. Therefore using the following code will prevent R to read character strings as factors.\n\noptions(stringsAsFactors=FALSE)\n\nIf your character vector is read as a factor, use as.character() function. If your numeric vector is read as a factor, use as.numeric(as.character()) function. Examples are given below.\n\nfactvec&lt;-factor(c(\"a\",\"b\",\"c\",\"a\")) #Factor data vector\nfactvec\nas.character(factvec) #Convert to character\nfactvec2&lt;-factor(c(10,20,30,40,10)) #Factor data vector with numbers only\nfactvec2\nas.numeric(factvec2) #If you want to convert directly to numeric, output will not be desirable.\nas.numeric(as.character(factvec2))\n\n\n5.6.1 RData\nRData is a special data file type used by R. It is quite useful and efficient to store (better than csv). One disadvantage is it is not as common as csv, so reading RData outside R is a challenge.\n\nload(path=\"some_RData\")\nsave(some_data_frame,file=\"some_file.RData\")"
  },
  {
    "objectID": "base-r-in-detail.html#packages",
    "href": "base-r-in-detail.html#packages",
    "title": "2  Base R in Detail",
    "section": "5.7 Packages",
    "text": "5.7 Packages\nPackages are the most important asset class of R. These last years have seen a rapid expansion of R packages for almost any topic of interest that need computation. There are two steps to use a package; to install and to load.\n\ninstall.packages(\"package_name\") #Install command\nlibrary(package_name) #Load the package require() also works. No quotes!\n\nRemember: You need to install a package only once. It is downloaded and ready to use whenever you load the package with library(). Packages are updated from time to time. To update your installed packages, use update.packages() command.\nBelow displays an example of a package use from the start. You will see how it is done in base R and how it can be enhanced with the packages.\n\n5.7.1 Plotting\nPlotting in R can be a bit problematic and hard. Let’s plot the returns of stock indexes of the previous EuStockMarkets data.\n\n#Let's redo what we did previously.\neu_df&lt;- data.frame(EuStockMarkets[1:20,]) #Take the first 20 rows of the stock market index data\neu_df_returns &lt;- data.frame(DAX=100*(round(eu_df$DAX[-1]/eu_df$DAX[-20],4)-1),\n                            CAC=100*(round(eu_df$CAC[-1]/eu_df$CAC[-20],4)-1)) #Calculate the index percentage returns\neu_df_returns\n\n     DAX   CAC\n1  -0.93 -1.26\n2  -0.44 -1.86\n3   0.90 -0.58\n4  -0.18  0.88\n5  -0.47 -0.51\n6   1.25  1.18\n7   0.58  1.32\n8  -0.29 -0.19\n9   0.64  0.02\n10  0.12  0.31\n11 -0.58 -0.24\n12 -0.51  0.15\n13 -0.52 -0.03\n14  0.20  0.34\n15  0.18 -0.04\n16  0.27  0.35\n17 -0.66  0.52\n18 -0.48  0.11\n19 -0.52 -0.70\n\n\nBase R plotting is as following.\n\nplot(x=1:nrow(eu_df_returns),\n     y=eu_df_returns$DAX,\n     type=\"l\",col=\"red\",\n     ylim=c(min(unlist(eu_df_returns)),max(unlist(eu_df_returns))),\n     ylab=\"Returns (%)\",\n     xlab=\"Time Index\")\nlines(eu_df_returns$CAC)\n\n\n\n\nYou can probably do better with ggplot2 package. It has more beautiful aesthetics, more readable code and better options. Even with the default values your plots will look better. Here is a simple implementation of the previous example.\n\nif(!(\"ggplot2\" %in% rownames(installed.packages()))){\n  install.packages(\"ggplot2\") #Install the package (you can skip it if it is already installed)\n}\nlibrary(ggplot2)\nggplot(data=eu_df_returns,aes(x=1:nrow(eu_df_returns))) +\ngeom_line(aes(y=DAX,color=\"DAX\")) +\ngeom_line(aes(y=CAC,color=\"CAC\")) +\nlabs(x=\"Time Index\",y=\"Returns (%)\")"
  },
  {
    "objectID": "base-r-in-detail.html#recommendations",
    "href": "base-r-in-detail.html#recommendations",
    "title": "2  Base R in Detail",
    "section": "5.8 Recommendations",
    "text": "5.8 Recommendations\nR is quite extensive and the best ways to quickly learn are to write as much code as possible (this is the boring advice) and expose yourself to information by subscribing to newsletters, following related Twitter accounts and Facebook pages. Some prominently beneficial sources are given below.\nR CRAN Task View: Curated lists of packages categorized on the purpose of use. They have categories such as Finance, Time Series and Econometrics. It is a good way to start searching for packages.\nStackexchange: Programmer’s best friend. It is the umbrella site for highly technical Q&A sites such as Stack Overflow (for general programming), Cross Validated (statistics and data science) and Quantitative Finance. You can ask your programming problems here by providing an MWE (minimal working example)\nKaggle: There are many data science tasks, data sets and codes in here. Known for data competitions.\nQuandl: Vast collection of data sets mainly on economics and finance. Great R support (even has a package).\nGitHub: Most popular online code repository for git5 based projects. Plus, putting R packages on GitHub prior to release on CRAN is a popular practice (advanced topic).\nCoursera: Online learning at its best. There are many good quality quantitative finance, R and data science courses in here.\nR-bloggers: Very useful site about R. I personally recommend subscribing to their newsletter and following their Twitter and Facebook accounts.\nR-SIG-FIN: A mail group about R and Finance. A bit outdated but you can still search the archives.\nROpenSci: An organization promoting reproducible research with R. They have many good packages also.\n\n5.8.1 R Cheat Sheets\nThere are many code cheat sheets on the internet. Here are some. I will update the list with new additions.\nRStudio Cheat Sheets: Cheat sheets on base R, plotting and some very useful packages (i.e. dplyr, ggplot2, shiny, rmarkdown).\nData Management\nQuandl Cheat Sheet: A cheat sheet by Quandl. There are also tips to use the quandl package.\nR Reference Card: This one is from official R site.\nGoogle’s R Style Guide: This is more about styling your code. Best practices for readability."
  },
  {
    "objectID": "base-r-in-detail.html#footnotes",
    "href": "base-r-in-detail.html#footnotes",
    "title": "2  Base R in Detail",
    "section": "",
    "text": "Read as not compiled like C or C++. Line by line, you can run the code.↩︎\nCurrently, take it as a warning of “Do not use unnecessary loops (i.e. for) in your code.”↩︎\nYou can use either or both; there is only a small difference between those two.↩︎\nYou can specifically define integer, double or complex numeric types. For the sake of simplicity let’s use only numeric, for now.↩︎\nGit is a version controlling system mainly for software development but basically for any project. It mainly replaces the practice of code_finalfinalfinal.r and finalreport_lastlastlastthisisthelastipromise.docx↩︎"
  },
  {
    "objectID": "dplyr.html#introduction-to-dplyr-1.0.0",
    "href": "dplyr.html#introduction-to-dplyr-1.0.0",
    "title": "3  dplyr",
    "section": "3.1 Introduction to dplyr 1.0.0+",
    "text": "3.1 Introduction to dplyr 1.0.0+\nMain purpose of this document is to introduce a major data manipulation package, dplyr, with a contemporary subject. There are seven fundamental dplyr functions: select/rename, filter, distinct, arrange, mutate/transmute, group_by and summarise with a number of assisting functions used either in these functions or separately. In this document, we will cover every one of them and there will be supplementary functions to carry out data operations. Also, pipe operator (%&gt;%) will be briefly introduced. This document is updated for dplyr 1.0.0 and R 4.0+ to show you new stuff as well. We will also use lubridate package for date time operations but we will not cover it except for quick explanations (check appendix at the end of this document for a mini tutorial). You can use advanced features in the “Advance Usage” subsections.\n\n3.1.1 Preparations\nThere are two prerequisites to start: Install tidyverse package and putting the relevant data set into the working directory (write getwd() in the console to locate your working directory). In this document, topic of the data set is the hourly licensed and unlicensed renewable energy production data between January 1, 2018 and May 31, 2020.\nTo install the package run install.packages(\"tidyverse\") in the console and select a mirror (first one is quite ok). Once you install the library you can always call it with library(tidyverse) command (no need to reinstall). You can download the data set from its GitHub Repository.\n\nlibrary(tidyverse) #tidyverse is a package group which includes dplyr as well\nlibrary(lubridate)\nraw_df &lt;- readRDS(\"rp_201801_202005_df.rds\")\n\nFirst of those above commands calls the package (different from installing) The second command assigns the data to raw_df variable. There are two types of assignment operators in R: &lt;- and =. No operation in R is permanent unless you assign it to somewhere (There are exceptions, though. See data.table package for instance.). We will benefit from this property in this document as well. No matter how many operations we do on each example we will always start from the original data frame.\nLet’s do a simple sanity check. The output of the following command reads “21,168 x 17” in the first line, which means there are 21,168 rows and 17 columns in the tibble. Tibble is the name of the data.frame type of dplyr. It usually is data frame plus some advanced features. There are abbreviations of data types under each column name. These are usually character/string (), numeric (, if integer ), logical (TRUE/FALSE, logical) (), factor (), date () and datetime (). In the introduction phase we will only use character, numeric and logical data types.\n\nprint(raw_df,n=3)\n\n# A tibble: 21,168 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.           913.       75.8         2585.\n2 2020-05-31 22:00:00    1577.           908.       75.6         2631.\n3 2020-05-31 21:00:00    1858.           901.       75.4         2585.\n# ℹ 21,165 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nAlso we can use glimpse function to inspect. Using glimpse each column is represented in a row with its data type and first few entries. Our data consists of hourly renewable electricity production of YEKDEM plants from different origins and license types. YEKDEM is a type of feed-in-tariff incentive framework. Suffixes with “_lic” represents licensed (larger scale) plants and “_ul” represents unlicensed (smaller scale) production. canalType, riverType and reservoir columns represent hydro power.\n\nraw_df %&gt;% glimpse()\n\nRows: 21,168\nColumns: 17\n$ dt              &lt;dttm&gt; 2020-05-31 23:00:00, 2020-05-31 22:00:00, 2020-05-31 …\n$ wind_lic        &lt;dbl&gt; 1433.8132, 1577.1419, 1857.5492, 1933.0142, 2031.7862,…\n$ geothermal_lic  &lt;dbl&gt; 912.7882, 907.9303, 900.5844, 888.4561, 864.5402, 847.…\n$ biogas_lic      &lt;dbl&gt; 75.8047, 75.6163, 75.3906, 76.7873, 76.9707, 77.5750, …\n$ canalType_lic   &lt;dbl&gt; 2584.930, 2630.602, 2585.038, 2542.381, 2594.459, 2622…\n$ riverType_lic   &lt;dbl&gt; 316.5538, 316.6800, 356.7637, 350.1544, 377.5312, 379.…\n$ biomass_lic     &lt;dbl&gt; 262.4994, 253.0814, 246.9268, 249.9152, 248.2336, 246.…\n$ landfillGas_lic &lt;dbl&gt; 100.3971, 101.1378, 100.4442, 100.7307, 102.2474, 102.…\n$ sun_lic         &lt;dbl&gt; 0.0000, 0.0000, 0.0000, 0.0000, 2.0594, 14.2800, 48.09…\n$ reservoir_lic   &lt;dbl&gt; 2306.303, 2296.045, 2279.266, 2308.918, 2792.313, 3180…\n$ others_lic      &lt;dbl&gt; 48.3833, 48.4011, 48.4041, 48.4199, 48.4653, 48.5485, …\n$ wind_ul         &lt;dbl&gt; 3.7751, 4.8375, 7.6659, 11.8121, 13.1070, 13.1830, 10.…\n$ biogas_ul       &lt;dbl&gt; 16.9293, 16.9227, 16.9052, 16.7517, 16.2928, 16.5989, …\n$ canalType_ul    &lt;dbl&gt; 4.1749, 4.4221, 4.4658, 4.6020, 4.6195, 4.5146, 4.6616…\n$ biomass_ul      &lt;dbl&gt; 15.4698, 15.3609, 16.0483, 15.2271, 15.5563, 15.5007, …\n$ sun_ul          &lt;dbl&gt; 0.0582, 0.0320, 0.0335, 1.3121, 103.3267, 555.5787, 14…\n$ others_ul       &lt;dbl&gt; 0.0610, 0.0395, 0.4136, 0.5508, 0.7106, 1.3775, 2.7468…\n\n\nDid you notice the expression we used this time? Pipe operator makes data analysis and transformation very easy and civilized. We will use pipes frequently in this document and in the future.\nWe can connect many functions without calling the variable multiple times with the help of the pipe operator."
  },
  {
    "objectID": "dplyr.html#fundamentals",
    "href": "dplyr.html#fundamentals",
    "title": "3  dplyr",
    "section": "3.2 Fundamentals",
    "text": "3.2 Fundamentals\nIn this chapter fundamental functions of dplyr are introduced. Every function will be used in the following examples after it has been introduced. To limit the number of displayed rows, we use the following global option. You can ignore this part in your exercises.\n\noptions(tibble.print_max = 3, tibble.print_min = 3)\n\n\n3.2.1 select/rename\nSelect, as the name suggests, is used to select columns. For instance, suppose we only want licensed wind production (wind_lic) and date-time (dt) columns.\n\nraw_df %&gt;% select(dt,wind_lic)\n\n# A tibble: 21,168 × 2\n  dt                  wind_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.\n2 2020-05-31 22:00:00    1577.\n3 2020-05-31 21:00:00    1858.\n# ℹ 21,165 more rows\n\n\nIf we wanted to write the above expression without the pipe operator, we could go with the sad expression below. You can extrapolate how complicated things can be without the pipe.\n\nselect(raw_df,dt,wind_lic)\n\nWe can use rename to rename columns (again as the name suggests). Let’s change dt to date_time.\n\nraw_df %&gt;% rename(date_time = dt)\n\n# A tibble: 21,168 × 17\n  date_time           wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.           913.       75.8         2585.\n2 2020-05-31 22:00:00    1577.           908.       75.6         2631.\n3 2020-05-31 21:00:00    1858.           901.       75.4         2585.\n# ℹ 21,165 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\np.s. We can rename columns inside select function.\nSelect has many convenient sub operators and special expressions. If we know the order of columns, we can use the scope (:) expression to get all the columns determined by the scope. Suppose, we want date-time (dt) and licensed production.\n\nraw_df %&gt;% select(date_time=dt,wind_lic:others_lic)\n\n# A tibble: 21,168 × 11\n  date_time           wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.           913.       75.8         2585.\n2 2020-05-31 22:00:00    1577.           908.       75.6         2631.\n3 2020-05-31 21:00:00    1858.           901.       75.4         2585.\n# ℹ 21,165 more rows\n# ℹ 6 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;, others_lic &lt;dbl&gt;\n\n\nWe can eliminate unwanted columns by putting - before the names. Suppose I am not interested in wind values, want to remove all other related columns from the data set, and all other related column names start with “wind_”. We can do it using - and starts_with.\n\nraw_df %&gt;% select(-starts_with(\"wind_\")) \n\n# A tibble: 21,168 × 15\n  dt                  geothermal_lic biogas_lic canalType_lic riverType_lic\n  &lt;dttm&gt;                       &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00           913.       75.8         2585.          317.\n2 2020-05-31 22:00:00           908.       75.6         2631.          317.\n3 2020-05-31 21:00:00           901.       75.4         2585.          357.\n# ℹ 21,165 more rows\n# ℹ 10 more variables: biomass_lic &lt;dbl&gt;, landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;,\n#   reservoir_lic &lt;dbl&gt;, others_lic &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nThere are similar expressions for other purposes, such as starts_with, everything and contains. You can see all the expressions in the Cheat Sheet link given at the end of this document.\ndplyr 1.0.0 Feature: Sometimes you just want to change the order of the columns. Then use relocate. Suppose we want to show solar and wind production with date-time. But we want to get licensed wind together with licensed solar.\n\nraw_df %&gt;% select(dt,starts_with(\"sun_\"),starts_with(\"wind\")) %&gt;% relocate(wind_lic,.before=sun_ul)\n\n# A tibble: 21,168 × 5\n  dt                  sun_lic wind_lic sun_ul wind_ul\n  &lt;dttm&gt;                &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 2020-05-31 23:00:00       0    1434. 0.0582    3.78\n2 2020-05-31 22:00:00       0    1577. 0.032     4.84\n3 2020-05-31 21:00:00       0    1858. 0.0335    7.67\n# ℹ 21,165 more rows\n\n\nIf we specify nothing, it will be in the first place.\n\nraw_df %&gt;% select(dt,starts_with(\"sun_\"),starts_with(\"wind\")) %&gt;% relocate(wind_lic)\n\n# A tibble: 21,168 × 5\n  wind_lic dt                  sun_lic sun_ul wind_ul\n     &lt;dbl&gt; &lt;dttm&gt;                &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1    1434. 2020-05-31 23:00:00       0 0.0582    3.78\n2    1577. 2020-05-31 22:00:00       0 0.032     4.84\n3    1858. 2020-05-31 21:00:00       0 0.0335    7.67\n# ℹ 21,165 more rows\n\n\nWe use last_col() if we want to take a column to the end.\n\nraw_df %&gt;% select(dt,starts_with(\"sun_\"),starts_with(\"wind\")) %&gt;% relocate(dt,.after=last_col())\n\n# A tibble: 21,168 × 5\n  sun_lic sun_ul wind_lic wind_ul dt                 \n    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dttm&gt;             \n1       0 0.0582    1434.    3.78 2020-05-31 23:00:00\n2       0 0.032     1577.    4.84 2020-05-31 22:00:00\n3       0 0.0335    1858.    7.67 2020-05-31 21:00:00\n# ℹ 21,165 more rows\n\n\nHonestly, relocate is a very convenient function.\n\n3.2.1.1 select/rename advanced usage\nAdvanced usage subsection introduces extra functionality which can be a bit confusing at the first phase. But, once you get a grasp on the fundamentals check back here as reference. There are several features not available for versions before dplyr 1.0.0.\nWe can use rename_with function to rename columns with given criteria. In pipe version of the function, first parameter is the function and the second parameter is the criterion. Let’s replace all “Type” with “_type”. For instance it should change “canalType” to “canal_type”.\n\nraw_df %&gt;% rename_with(~gsub(\"Type\",\"_type\",.),contains(\"Type\")) %&gt;% glimpse()\n\nRows: 21,168\nColumns: 17\n$ dt              &lt;dttm&gt; 2020-05-31 23:00:00, 2020-05-31 22:00:00, 2020-05-31 …\n$ wind_lic        &lt;dbl&gt; 1433.8132, 1577.1419, 1857.5492, 1933.0142, 2031.7862,…\n$ geothermal_lic  &lt;dbl&gt; 912.7882, 907.9303, 900.5844, 888.4561, 864.5402, 847.…\n$ biogas_lic      &lt;dbl&gt; 75.8047, 75.6163, 75.3906, 76.7873, 76.9707, 77.5750, …\n$ canal_type_lic  &lt;dbl&gt; 2584.930, 2630.602, 2585.038, 2542.381, 2594.459, 2622…\n$ river_type_lic  &lt;dbl&gt; 316.5538, 316.6800, 356.7637, 350.1544, 377.5312, 379.…\n$ biomass_lic     &lt;dbl&gt; 262.4994, 253.0814, 246.9268, 249.9152, 248.2336, 246.…\n$ landfillGas_lic &lt;dbl&gt; 100.3971, 101.1378, 100.4442, 100.7307, 102.2474, 102.…\n$ sun_lic         &lt;dbl&gt; 0.0000, 0.0000, 0.0000, 0.0000, 2.0594, 14.2800, 48.09…\n$ reservoir_lic   &lt;dbl&gt; 2306.303, 2296.045, 2279.266, 2308.918, 2792.313, 3180…\n$ others_lic      &lt;dbl&gt; 48.3833, 48.4011, 48.4041, 48.4199, 48.4653, 48.5485, …\n$ wind_ul         &lt;dbl&gt; 3.7751, 4.8375, 7.6659, 11.8121, 13.1070, 13.1830, 10.…\n$ biogas_ul       &lt;dbl&gt; 16.9293, 16.9227, 16.9052, 16.7517, 16.2928, 16.5989, …\n$ canal_type_ul   &lt;dbl&gt; 4.1749, 4.4221, 4.4658, 4.6020, 4.6195, 4.5146, 4.6616…\n$ biomass_ul      &lt;dbl&gt; 15.4698, 15.3609, 16.0483, 15.2271, 15.5563, 15.5007, …\n$ sun_ul          &lt;dbl&gt; 0.0582, 0.0320, 0.0335, 1.3121, 103.3267, 555.5787, 14…\n$ others_ul       &lt;dbl&gt; 0.0610, 0.0395, 0.4136, 0.5508, 0.7106, 1.3775, 2.7468…\n\n\nDid you notice ~ and . in the function? Dot (.) is a representation of the entity. Depending on the situation it can be the latest version of the tibble in the pipe chain, a specific column or something else. ~ is a special character notifying that function evaluation will be done using the dot notation. We will see more examples of that.\nLet’s introduce where. If is a function from tidyselect package to select variables with a function where it returns TRUE. It is quite handy.\n\nraw_df %&gt;% select(dt,starts_with(\"sun_\"),starts_with(\"wind\")) %&gt;% relocate(where(is.numeric))\n\n# A tibble: 21,168 × 5\n  sun_lic sun_ul wind_lic wind_ul dt                 \n    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dttm&gt;             \n1       0 0.0582    1434.    3.78 2020-05-31 23:00:00\n2       0 0.032     1577.    4.84 2020-05-31 22:00:00\n3       0 0.0335    1858.    7.67 2020-05-31 21:00:00\n# ℹ 21,165 more rows\n\n\nWe can also use any_of or all_of functions in select. The main difference is while the former returns as much as it can, the latter will throw an error if any one of the criteria is not fulfilled. Let’s try to select “dt”, “others_lic” and “nuclear_lic”. Since this data does not include nuclear power production we should not see it.\n\nraw_df %&gt;% select(any_of(c(\"dt\",\"others_lic\",\"nuclear_lic\")))\n\n# A tibble: 21,168 × 2\n  dt                  others_lic\n  &lt;dttm&gt;                   &lt;dbl&gt;\n1 2020-05-31 23:00:00       48.4\n2 2020-05-31 22:00:00       48.4\n3 2020-05-31 21:00:00       48.4\n# ℹ 21,165 more rows\n\n\nIn order not to break our notebook, we wrap it around try (error handling is another topic).\n\ntry(raw_df %&gt;% select(all_of(c(\"dt\",\"others_lic\",\"nuclear_lic\"))))\n\nError in all_of(c(\"dt\", \"others_lic\", \"nuclear_lic\")) : \n  Can't subset columns that don't exist.\n✖ Column `nuclear_lic` doesn't exist.\n\n\n\n\n\n3.2.2 filter/distinct\nFilter (no more “as the name suggests”, as you already figured it out) helps filter rows according to given criteria. It is highly similar with Excel’s filter functionality (but much much more flexible and reliable).\nLet’s see the production at 2020-05-08 16:00:00.\n\nraw_df %&gt;% filter(dt == \"2020-05-08 16:00:00\")\n\n# A tibble: 1 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-08 16:00:00    2618.           856.       79.8         3896.\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nBy using == operator, we bring the values in dt column which are equal to the hour we desired. There are other expressions such as not equal to (!=), greater than (or equal to) (&gt;,&gt;=), smaller than (or equal to) (&lt;,&lt;=), in (%in%) and some more.\nAt the same time we can make comparisons between columns and combine multiple criteria to create more complex filters. Here we use AND (&) and OR (|) operators to combine criteria.\nSuppose we want to find our the times when licensed wind production is greater than all of hydro type licensed production.\n\nraw_df %&gt;% filter(wind_lic &gt; canalType_lic & wind_lic &gt; reservoir_lic & wind_lic &gt; riverType_lic)\n\n# A tibble: 11,287 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-27 19:00:00    3303.           930.       74.7         2969.\n2 2020-05-27 18:00:00    3596.           914.       75.0         2953.\n3 2020-05-27 17:00:00    3551.           900.       76.3         2954.\n# ℹ 11,284 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nWe can add numeric operations as well. Suppose we want to find the total solar production is greater than total wind production.\n\nraw_df %&gt;% filter(wind_lic + wind_ul &lt; sun_lic + sun_ul)\n\n# A tibble: 4,949 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 16:00:00    2036.           843.       76.8         2616.\n2 2020-05-31 15:00:00    1875.           845.       77.4         2685.\n3 2020-05-31 14:00:00    1755.           853.       77.2         2715.\n# ℹ 4,946 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nSuppose we want to filter only the unique values. Then we simply use distinct command. Let’s get unique rounded licensed wind production values.\n\nraw_df %&gt;% distinct(round(wind_lic))\n\n# A tibble: 4,893 × 1\n  `round(wind_lic)`\n              &lt;dbl&gt;\n1              1434\n2              1577\n3              1858\n# ℹ 4,890 more rows\n\n\nIf we want to keep all columns we simply make the parameter .keep=TRUE.\n\nraw_df %&gt;% distinct(round(wind_lic),.keep=TRUE)\n\n# A tibble: 4,893 × 2\n  `round(wind_lic)` .keep\n              &lt;dbl&gt; &lt;lgl&gt;\n1              1434 TRUE \n2              1577 TRUE \n3              1858 TRUE \n# ℹ 4,890 more rows\n\n\n\n3.2.2.1 filter/distinct advanced usage\nLet’s introduce slice. This function helps return rows by its row number. Suppose we want the top 5 rows.\n\nraw_df %&gt;% slice(1:5) %&gt;% print(n=5)\n\n# A tibble: 5 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.           913.       75.8         2585.\n2 2020-05-31 22:00:00    1577.           908.       75.6         2631.\n3 2020-05-31 21:00:00    1858.           901.       75.4         2585.\n4 2020-05-31 20:00:00    1933.           888.       76.8         2542.\n5 2020-05-31 19:00:00    2032.           865.       77.0         2594.\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nIf we want to return random rows we have slice_sample. Let’s bring 5 random rows.\n\nraw_df %&gt;% slice_sample(n=5)\n\n# A tibble: 5 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2018-12-14 05:00:00    1344.           687.       82.2         1860.\n2 2019-12-29 12:00:00    4021.           862.       76.9         1210.\n3 2020-05-04 16:00:00    1753.           946.       77.5         3795.\n# ℹ 2 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nIf we want to do it proportionately, we have the prop parameter. Let’s say we want 0.1% of the data frame.\n\nraw_df %&gt;% slice_sample(prop=0.001)\n\n# A tibble: 21 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2019-08-23 10:00:00    3632.           686.       83.7         1179.\n2 2019-02-14 04:00:00    4759.           890.       83.1         2250.\n3 2018-05-24 15:00:00    2201.           575.       61.2         2483.\n# ℹ 18 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nThere are other slice_* type functions. These are slice_head/slice_tail for first/last n or percentage of rows. slice_min/slice_max for the top/bottom n rows according to an ordering criteria.\n\n\n\n3.2.3 arrange\nArrange sorts rows from A to Z or smallest to largest. It has great similarity with Excel’s Sort functionality.\nLet’s sort licensed reservoir production from largest to smallest.\n\nraw_df %&gt;% select(dt,reservoir_lic) %&gt;% arrange(desc(reservoir_lic))\n\n# A tibble: 21,168 × 2\n  dt                  reservoir_lic\n  &lt;dttm&gt;                      &lt;dbl&gt;\n1 2019-05-10 23:00:00         5058.\n2 2019-05-10 21:00:00         5035.\n3 2019-05-15 02:00:00         5019.\n# ℹ 21,165 more rows\n\n\nDo you see desc() function inside arrange? By default arrange sorts a column by first to last or A-Z. desc reverses this.\nYou can also use multiple sorting criteria and use operations inside arrange. Let’s arrange by licensed wind production rounded down (floor) in 100s range (e.g. 5634 = 5600 and 5693 = 5600 as well). Then we sort by date time to see the first time the production entered a 100-range in the data time period.\n\nraw_df %&gt;% arrange(desc(floor(wind_lic/100)*100),dt)\n\n# A tibble: 21,168 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2019-09-15 17:00:00    5767.           691.       83.0          922.\n2 2018-09-26 19:00:00    5622.           672.       67.8          951.\n3 2019-09-15 15:00:00    5628.           692.       81.4          901.\n# ℹ 21,165 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\n\n\n3.2.4 mutate/transmute\nMutate is the function when we do operations and calculations using other columns.\nFor instance let’s calculate wind power’s share in total renewables production at each hour.\n\nraw_df %&gt;% mutate(wind_lic_perc = wind_lic / (wind_lic + geothermal_lic + biogas_lic + canalType_lic + riverType_lic + biomass_lic + landfillGas_lic + sun_lic + reservoir_lic + others_lic + wind_ul + biogas_ul + canalType_ul + biomass_ul + sun_ul + others_ul)) %&gt;% select(dt, wind_lic_perc)\n\n# A tibble: 21,168 × 2\n  dt                  wind_lic_perc\n  &lt;dttm&gt;                      &lt;dbl&gt;\n1 2020-05-31 23:00:00         0.177\n2 2020-05-31 22:00:00         0.191\n3 2020-05-31 21:00:00         0.219\n# ℹ 21,165 more rows\n\n\nYou can use many R functions (from both base functions and other packages). For instance to calculate “competition” wind and solar we can use the following expression.\n\nraw_df %&gt;% mutate(wind_or_solar = ifelse(wind_lic + wind_ul &gt; sun_lic + sun_ul, \"wind\", \"solar\")) %&gt;% select(dt,wind_or_solar)\n\n# A tibble: 21,168 × 2\n  dt                  wind_or_solar\n  &lt;dttm&gt;              &lt;chr&gt;        \n1 2020-05-31 23:00:00 wind         \n2 2020-05-31 22:00:00 wind         \n3 2020-05-31 21:00:00 wind         \n# ℹ 21,165 more rows\n\n\nTransmute has the same functionality as mutate with the additional property similar to select. Transmute returns only the columns included in the function. Suppose we also want to calculate the difference between total wind and total solar.\n\nraw_df %&gt;% transmute(dt, wind_or_solar = ifelse(wind_lic + wind_ul &gt; sun_lic + sun_ul, \"wind\", \"solar\"), absdiff = abs(wind_lic + wind_ul - sun_lic - sun_ul))\n\n# A tibble: 21,168 × 3\n  dt                  wind_or_solar absdiff\n  &lt;dttm&gt;              &lt;chr&gt;           &lt;dbl&gt;\n1 2020-05-31 23:00:00 wind            1438.\n2 2020-05-31 22:00:00 wind            1582.\n3 2020-05-31 21:00:00 wind            1865.\n# ℹ 21,165 more rows\n\n\n\n3.2.4.1 mutate/transmute advanced usage\nSuppose we want to see the difference between the previous and next hour’s production. We offset rows using lead and lag functions. But remember lead and lag does not actually give you “next/previous hour’s” values, just the rows. You may need to arrange your data.\n\nraw_df %&gt;% transmute(dt, wind_lic, wind_lic_prev_h = lead(wind_lic,1), wind_lic_next_h = lag(wind_lic,1))\n\n# A tibble: 21,168 × 4\n  dt                  wind_lic wind_lic_prev_h wind_lic_next_h\n  &lt;dttm&gt;                 &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.           1577.             NA \n2 2020-05-31 22:00:00    1577.           1858.           1434.\n3 2020-05-31 21:00:00    1858.           1933.           1577.\n# ℹ 21,165 more rows\n\n\nIf you want to use the same function over several columns, you can use the new across function. Let’s round every numeric column to one significant digit.\n\nraw_df %&gt;% mutate(across(where(is.numeric),~round(.,1)))\n\n# A tibble: 21,168 × 17\n  dt                  wind_lic geothermal_lic biogas_lic canalType_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434.           913.       75.8         2585.\n2 2020-05-31 22:00:00    1577.           908.       75.6         2631.\n3 2020-05-31 21:00:00    1858.           901.       75.4         2585 \n# ℹ 21,165 more rows\n# ℹ 12 more variables: riverType_lic &lt;dbl&gt;, biomass_lic &lt;dbl&gt;,\n#   landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;, reservoir_lic &lt;dbl&gt;,\n#   others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;, canalType_ul &lt;dbl&gt;,\n#   biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\nWe can also specify columns. Let’s see the comparative production of wind and reservoir hydro against the unlicensed solar production. We just increment solar production by 1 to prevent any infinity values.\n\nraw_df %&gt;% mutate(sun_ul = sun_ul + 1) %&gt;% transmute(dt,across(c(wind_lic,reservoir_lic),~round(./sun_ul,2)))\n\n# A tibble: 21,168 × 3\n  dt                  wind_lic reservoir_lic\n  &lt;dttm&gt;                 &lt;dbl&gt;         &lt;dbl&gt;\n1 2020-05-31 23:00:00    1355.         2179.\n2 2020-05-31 22:00:00    1528.         2225.\n3 2020-05-31 21:00:00    1797.         2205.\n# ℹ 21,165 more rows\n\n\nIf there are multiple conditions ifelse is not enough. It is possible to use case_when to specify multiple conditions and outcomes.\n\nraw_df %&gt;% transmute(dt, solar_production_level = case_when(sun_ul &gt; quantile(sun_ul,0.9) ~ \"very high\", sun_ul &gt; quantile(sun_ul, 0.75) ~ \"high\", sun_ul &gt; quantile(sun_ul, 0.5) ~ \"above median\", TRUE ~ \"below median\"))  %&gt;% slice(7:9)\n\n# A tibble: 3 × 2\n  dt                  solar_production_level\n  &lt;dttm&gt;              &lt;chr&gt;                 \n1 2020-05-31 17:00:00 above median          \n2 2020-05-31 16:00:00 high                  \n3 2020-05-31 15:00:00 very high             \n\n\nrowwise is actually a type of group_by/summarise function but as the name suggests it allows us to do row-wise operations. Let’s calculate row sums by using c_across function and rowwise. Oh and also now, experimentally, you can use relocate functionality in mutate/transmute. So, conveniently we can place it after date time.\n\nraw_df %&gt;% slice_head(n=5) %&gt;% rowwise() %&gt;% mutate(total_prod = sum(c_across(where(is.numeric))),.after=dt)\n\n# A tibble: 5 × 18\n# Rowwise: \n  dt                  total_prod wind_lic geothermal_lic biogas_lic\n  &lt;dttm&gt;                   &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;\n1 2020-05-31 23:00:00      8082.    1434.           913.       75.8\n2 2020-05-31 22:00:00      8248.    1577.           908.       75.6\n3 2020-05-31 21:00:00      8496.    1858.           901.       75.4\n# ℹ 2 more rows\n# ℹ 13 more variables: canalType_lic &lt;dbl&gt;, riverType_lic &lt;dbl&gt;,\n#   biomass_lic &lt;dbl&gt;, landfillGas_lic &lt;dbl&gt;, sun_lic &lt;dbl&gt;,\n#   reservoir_lic &lt;dbl&gt;, others_lic &lt;dbl&gt;, wind_ul &lt;dbl&gt;, biogas_ul &lt;dbl&gt;,\n#   canalType_ul &lt;dbl&gt;, biomass_ul &lt;dbl&gt;, sun_ul &lt;dbl&gt;, others_ul &lt;dbl&gt;\n\n\n\n\n\n3.2.5 group_by/summarise\nFinally we will learn how to calculate summary tables. It is similar to Pivot Tables in Excel. group_by is the grouping function, summarise is the summarising function.\nFor instance let’s calculate number of hours where wind production is above 3000 MWh. We will use a special function n() to calculate number of rows. We can define groupings just like mutate.\n\nraw_df %&gt;% group_by(production_group = cut(wind_lic + wind_ul,breaks=c(0,1000,2000,3000,4000,5000,6000),include.lowest = TRUE)) %&gt;% summarise(count = n())\n\n# A tibble: 6 × 2\n  production_group count\n  &lt;fct&gt;            &lt;int&gt;\n1 [0,1e+03]         4294\n2 (1e+03,2e+03]     5733\n3 (2e+03,3e+03]     4725\n# ℹ 3 more rows\n\n\nNormally, we get one result for each group and summary function. From dplyr 1.0.0 we can have multiple row summarise for each group. Let’s say we want to find the minimum and maximum licensed wind production ranges for each year. But, be warned, it can be a little confusing.\n\nraw_df %&gt;% group_by(year = lubridate::year(dt)) %&gt;% summarise(wind_lic_range = range(wind_lic))\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 2\n# Groups:   year [3]\n   year wind_lic_range\n  &lt;dbl&gt;          &lt;dbl&gt;\n1  2018           46.2\n2  2018         5622. \n3  2019           32.8\n# ℹ 3 more rows\n\n\n\n3.2.5.1 group_by/summarise advanced usage\nJust like mutate/transmute you can use across in summarise as well. Let’s see median production of each year and each source. In this example we can also use the named list version of the functions and additional names structure.\n\nraw_df %&gt;% group_by(year = lubridate::year(dt)) %&gt;% summarise(across(where(is.numeric),list(med=median),.names=\"{fn}_{col}\"))\n\n# A tibble: 3 × 17\n   year med_wind_lic med_geothermal_lic med_biogas_lic med_canalType_lic\n  &lt;dbl&gt;        &lt;dbl&gt;              &lt;dbl&gt;          &lt;dbl&gt;             &lt;dbl&gt;\n1  2018        1989.               694.           66.4             1480.\n2  2019        2136.               814.           80.9             1575.\n3  2020        2297.               951.           78.5             2779.\n# ℹ 12 more variables: med_riverType_lic &lt;dbl&gt;, med_biomass_lic &lt;dbl&gt;,\n#   med_landfillGas_lic &lt;dbl&gt;, med_sun_lic &lt;dbl&gt;, med_reservoir_lic &lt;dbl&gt;,\n#   med_others_lic &lt;dbl&gt;, med_wind_ul &lt;dbl&gt;, med_biogas_ul &lt;dbl&gt;,\n#   med_canalType_ul &lt;dbl&gt;, med_biomass_ul &lt;dbl&gt;, med_sun_ul &lt;dbl&gt;,\n#   med_others_ul &lt;dbl&gt;"
  },
  {
    "objectID": "dplyr.html#exercises",
    "href": "dplyr.html#exercises",
    "title": "3  dplyr",
    "section": "3.3 Exercises",
    "text": "3.3 Exercises\nSolve the following exercises. Outputs are given below, you are expected write code to match the outputs.\n\nFind the mean and standard deviation of licensed geothermal productions in all years. (Tip: Use lubridate::year to get years from date data.)\n\n\n\n# A tibble: 3 × 3\n   year mean_geo sd_geo\n  &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n1  2018     681.   65.2\n2  2019     799.   74.2\n3  2020     935.   59.0\n\n\n\nFind the hourly average unlicensed solar (sun_ul) production levels for May 2020.\n\n\n\n# A tibble: 24 × 2\n   hour avg_prod\n  &lt;int&gt;    &lt;dbl&gt;\n1     0     0.17\n2     1     0.37\n3     2     0.7 \n# ℹ 21 more rows\n\n\n\nFind the average daily percentage change of licensed biomass (biomass_lic) in 2019. (e.g. Suppose daily production is 50 in day 1 and 53 in day 2, then the change should be (53-50)/50 -1 = 0.06) (Tip: Use lubridate::as_date to convert date time to date. Use lag and lead functions to offset values.)\n\n\n\n# A tibble: 1 × 1\n  average_change\n           &lt;dbl&gt;\n1        0.00282\n\n\n\nFind the yearly total production levels in TWh (Current values are in MWh. 1 GWh is 1000 MWh and 1 TWh is 1000 GWh). (Tip: In order to avoid a lengthy summation you can use tidyr::pivot_longer to get a long format.)\n\n\n\n# A tibble: 3 × 2\n   year total_production\n  &lt;dbl&gt;            &lt;dbl&gt;\n1  2018             62.6\n2  2019             76.7\n3  2020             37.3"
  },
  {
    "objectID": "dplyr.html#conclusion",
    "href": "dplyr.html#conclusion",
    "title": "3  dplyr",
    "section": "3.4 Conclusion",
    "text": "3.4 Conclusion\nFundamental dplyr functions provide very convenient tools for data analysis. It can also be used to generate the features required for modelling. You can process few million rows of data without breaking a sweat (for larger data sets you can use data.table), you can prepare functions instead of manual Excel operations. With R Markdown system, which this tutorial is prepared in, you can create reproducible documents and automatize the reports. You can use ggplot2 for visualizations, which is also part of the tidyverse package ecosystem."
  },
  {
    "objectID": "dplyr.html#appendix",
    "href": "dplyr.html#appendix",
    "title": "3  dplyr",
    "section": "3.5 Appendix",
    "text": "3.5 Appendix\n\n3.5.1 Mini lubridate tutorial\nIn this tutorial we use a small portion of a very powerful package, lubridate. You can see the official website here.\nLet’s take just 3 dates at random from our data set.\n\nset.seed(5)\nlub_df &lt;- \nraw_df %&gt;% \n  select(dt) %&gt;%\n  sample_n(3)\n\nprint(lub_df)\n\n# A tibble: 3 × 1\n  dt                 \n  &lt;dttm&gt;             \n1 2018-12-02 06:00:00\n2 2019-01-12 05:00:00\n3 2018-04-16 09:00:00\n\n\nSince we called lubridate at the beginning of this tutorial we do not need to call by package reference (lubridate::) but it is generally good practice.\n\nlub_df %&gt;% \n  mutate(\n    year = lubridate::year(dt),\n    month = lubridate::month(dt),\n    day = lubridate::day(dt),\n    week_day = lubridate::wday(dt),\n    wday_label = lubridate::wday(dt,label=TRUE),\n    hour = lubridate::hour(dt),\n    minute = lubridate::minute(dt),\n    second = lubridate::second(dt)\n  )\n\n# A tibble: 3 × 9\n  dt                   year month   day week_day wday_label  hour minute second\n  &lt;dttm&gt;              &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;ord&gt;      &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt;\n1 2018-12-02 06:00:00  2018    12     2        1 Sun            6      0      0\n2 2019-01-12 05:00:00  2019     1    12        7 Sat            5      0      0\n3 2018-04-16 09:00:00  2018     4    16        2 Mon            9      0      0"
  },
  {
    "objectID": "dplyr.html#references",
    "href": "dplyr.html#references",
    "title": "3  dplyr",
    "section": "3.6 References",
    "text": "3.6 References\n\nData Set: EPIAS/EXIST Transparency Platform\nTidyverse: https://www.tidyverse.org/\nR for Data Science: https://r4ds.had.co.nz/\nCheatsheet (Data Transformation) (Turkish Version)"
  },
  {
    "objectID": "ggplot2.html#preparation",
    "href": "ggplot2.html#preparation",
    "title": "4  ggplot2",
    "section": "4.1 Preparation",
    "text": "4.1 Preparation\n\nraw_df &lt;- readRDS(\"rp_201801_202005_df.rds\")"
  },
  {
    "objectID": "ggplot2.html#scatterplot",
    "href": "ggplot2.html#scatterplot",
    "title": "4  ggplot2",
    "section": "4.2 Scatterplot",
    "text": "4.2 Scatterplot\nFirst let’s preprocess our data to get production in May 2020 and hours between 10:00 AM and 5:00 PM.\n\nplot_df1 &lt;- \n  raw_df %&gt;% \n    filter(dt &gt;= \"2020-05-01\" & dt &lt; \"2020-06-01\" & lubridate::hour(dt) &gt;= 10 & lubridate::hour(dt) &lt;= 17) %&gt;%   transmute(hour_of_day = lubridate::hour(dt),wind_lic,sun_ul)\n\nprint(plot_df1,n=3)\n\n# A tibble: 248 × 3\n  hour_of_day wind_lic sun_ul\n        &lt;int&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n1          17    2055.  1442.\n2          16    2036.  2523.\n3          15    1875.  3402.\n# ℹ 245 more rows\n\n\nLet’s plot licensed wind production against unlicensed solar production for May 2020 for hours between 10-17. We can say that\n\nUsually during morning time solar production is high and wind production is kind of low.\nExpectedly solar production is decreasing in the afternoon\n\n\nggplot(plot_df1, aes(x = wind_lic, y = sun_ul, color = as.character(hour_of_day))) + geom_point()\n\n\n\n\nggplot2 is quite flexible. We can move aes from ggplot object to geom_point object.\n\nggplot(plot_df1) + geom_point(aes(x = wind_lic, y = sun_ul, color = as.character(hour_of_day)))"
  },
  {
    "objectID": "ggplot2.html#line-chart",
    "href": "ggplot2.html#line-chart",
    "title": "4  ggplot2",
    "section": "4.3 Line Chart",
    "text": "4.3 Line Chart\nHere I want to compare wind and solar production in a time series plot.\n\nplot_df2 &lt;- raw_df %&gt;% filter(dt &gt;= \"2020-05-01\" & dt &lt; \"2020-06-01\") %&gt;% select(dt,wind_lic,sun_ul) \n\nprint(plot_df2,n=3)\n\n# A tibble: 744 × 3\n  dt                  wind_lic sun_ul\n  &lt;dttm&gt;                 &lt;dbl&gt;  &lt;dbl&gt;\n1 2020-05-31 23:00:00    1434. 0.0582\n2 2020-05-31 22:00:00    1577. 0.032 \n3 2020-05-31 21:00:00    1858. 0.0335\n# ℹ 741 more rows\n\n\n\nggplot(plot_df2) + \n  geom_line(aes(x=dt,y=wind_lic,color=\"wind\")) + \n  geom_line(aes(x=dt,y=sun_ul,color=\"solar\"))\n\n\n\n\nWhat if I don’t want to repeat geom_line functions? I can use pivot_longer function to get all in a single geom_line.\n\nggplot(plot_df2 %&gt;% pivot_longer(.,cols=-dt),aes(x=dt,y=value,color=name)) + geom_line()"
  },
  {
    "objectID": "ggplot2.html#bar-chart",
    "href": "ggplot2.html#bar-chart",
    "title": "4  ggplot2",
    "section": "4.4 Bar Chart",
    "text": "4.4 Bar Chart\nNow I’d like to get the May 2020 production and I’d like to differentiate Licensed and Unlicensed.\n\nplot_df3 &lt;- raw_df %&gt;% filter(dt &gt;= \"2020-05-01\" & dt &lt; \"2020-06-01\") %&gt;% summarise(across(-dt,sum)) %&gt;% pivot_longer(.,everything()) %&gt;% mutate(type = ifelse( grepl(\"_lic+$\",name),\"Licensed\",\"Unlicensed\"))\n\nprint(plot_df3,n=3)\n\n# A tibble: 16 × 3\n  name              value type    \n  &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;   \n1 wind_lic       1346260. Licensed\n2 geothermal_lic  654089. Licensed\n3 biogas_lic       56839. Licensed\n# ℹ 13 more rows\n\n\nLet’s plot total productions using a bar chart. To improve readability, we reorder by production and differentiate Licensed/Unlicensed using color.\n\nggplot(plot_df3,aes(x=reorder(name,-value),y=value,fill=type)) + geom_bar(stat = \"identity\") + theme(axis.text.x = element_text(angle=60,vjust=1,hjust=1))"
  },
  {
    "objectID": "ggplot2.html#pie-chart",
    "href": "ggplot2.html#pie-chart",
    "title": "4  ggplot2",
    "section": "4.5 Pie Chart",
    "text": "4.5 Pie Chart\n\nggplot(plot_df3 %&gt;% filter(type==\"Licensed\"),aes(x=\"\",y=value,fill=name)) + geom_bar(stat=\"identity\") + coord_polar(\"y\")"
  },
  {
    "objectID": "ggplot2.html#theming-and-customization",
    "href": "ggplot2.html#theming-and-customization",
    "title": "4  ggplot2",
    "section": "4.6 Theming and Customization",
    "text": "4.6 Theming and Customization\nLet’s get our charts better looks!\n\nsc_plot &lt;- ggplot(plot_df1) + geom_point(aes(x = wind_lic, y = sun_ul, color=as.character(hour_of_day)))\n\nsc_plot\n\n\n\n\n\nsc_plot2 &lt;- sc_plot + theme_minimal()\nsc_plot2\n\n\n\n\n\nsc_plot3 &lt;-\nsc_plot2 + labs(x=\"Licensed Wind Production (MWh)\", y=\"Unlicensed Solar Production (MWh)\", color=\"Hour of Day\", title = \"Licensed Wind vs Unlicensed Solar\", subtitle = \"Renewable production in May 2020, between 10:00-17:00 each day\") \n\nsc_plot3\n\n\n\n\n\nsc_plot3 + theme(legend.position = \"top\",axis.text.x = element_text(angle=45,hjust=1,vjust=1)) + scale_y_continuous(labels=function(x) format(x, big.mark = \".\", decimal.mark = \",\", scientific = FALSE)) + scale_x_continuous(labels=function(x) format(x, big.mark = \".\", decimal.mark = \",\", scientific = FALSE))"
  },
  {
    "objectID": "quarto.html#resources",
    "href": "quarto.html#resources",
    "title": "5  Quarto",
    "section": "5.1 Resources",
    "text": "5.1 Resources\n\nA Quarto tip a day\nQuarto Gallery\nAwesome Quarto\n#quartopub hashtag on Twitter"
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "6  shiny",
    "section": "",
    "text": "Coming soon…"
  },
  {
    "objectID": "fundamentals-end.html",
    "href": "fundamentals-end.html",
    "title": "7  Chapter End",
    "section": "",
    "text": "Fundamentals chapter ends here. You now built the foundations for data analysis skills to take it to the next level. Congratulations!"
  },
  {
    "objectID": "advanced.html",
    "href": "advanced.html",
    "title": "Advanced",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "reticulate.html#initialization",
    "href": "reticulate.html#initialization",
    "title": "Using Python and R Together",
    "section": "Initialization",
    "text": "Initialization\nIt always starts with the loading of the package.\n\nlibrary(reticulate)\n\nPython has multiple versions (thankfully they phased out Python 2 but still a pain in many operating systems) You can learn the current python version PATH using Sys.which function. Output will differ in different systems and installations.\n\nSys.which(\"python\")\n\n                             python \n\"/Users/rocket/.pyenv/shims/python\" \n\n\nFor better detail, py_config is a good function. Output will differ in different systems and installations.\n\npy_config()\n\npython:         /Users/rocket/.virtualenvs/r-reticulate/bin/python\nlibpython:      /Users/rocket/.pyenv/versions/3.11.6/lib/libpython3.11.dylib\npythonhome:     /Users/rocket/.virtualenvs/r-reticulate:/Users/rocket/.virtualenvs/r-reticulate\nversion:        3.11.6 (main, Nov 23 2023, 13:24:35) [Clang 14.0.0 (clang-1400.0.29.202)]\nnumpy:          /Users/rocket/.virtualenvs/r-reticulate/lib/python3.11/site-packages/numpy\nnumpy_version:  1.26.2\n\n\nFor available configurations py_discover_config can be used.\n\npy_discover_config()\n\nreticulate can use other python installations, virtual environments and conda versions. Although it is a great convenience, intricacies and delicateness of Python versions might still hurt your workflows.\n\nuse_python() ## python path\nuse_virtualenv() ## virtual environment name\nuse_condaenv() ## conda environment"
  },
  {
    "objectID": "reticulate.html#methods-and-examples",
    "href": "reticulate.html#methods-and-examples",
    "title": "Using Python and R Together",
    "section": "Methods and Examples",
    "text": "Methods and Examples\nIn this section we will see some methodologies to use with reticulate.\n\nCall Python functions R style\nThis is the fundamental and (in my opinion) worst way to benefit from Python in R. Because translation of style is imperfect and might not work in every case.\nHere is an example with pandas. Install pandas if not installed.\n\npy_install(\"pandas\")\n\n\n## similar to import pandas as pd\npd &lt;- import(\"pandas\")\n## create a simple dataframe\ndf_pandas &lt;- pd$DataFrame(data = list(col1 = c(2, 1, 3), col2 = c(\"a\", \"b\", \"c\")))\n\ndf_pandas\n\n  col1 col2\n1    2    a\n2    1    b\n3    3    c\n\n\nLet’s try a simple example.\n\nos &lt;- import(\"os\")\nos$path$join(\"a\", \"b\", \"c\")\n\n[1] \"a/b/c\"\n\n\nCaveats: Some functions working on console might not work on RMarkdown\n\ntry(df_pandas$sort_values(\"col1\"))\n\nError in try(df_pandas$sort_values(\"col1\")) : \n  attempt to apply non-function\n\n\n\n## filter using query fails both on console and rmarkdown\ntry(df_pandas$query(\"col1 &gt; 1.0\"))\n\nError in try(df_pandas$query(\"col1 &gt; 1.0\")) : \n  attempt to apply non-function\n\n\n\n\nCall Python in RMarkdown chunk\nThe format is similar to an R chunk but instead of r write python.\n\n\n```{python}\n#your python code here\n```\n\n\nHere is an example\n\nimport os\nos.path.join(\"a\",\"b\",\"c\")\n\n'a/b/c'\n\n\nOur pandas examples also works in this case.\n\nimport pandas as pd\n\npandas_df_py = pd.DataFrame(data={'col1':[2,1,3],'col2':['a','b','c']}) \n\npandas_df_py\n\n   col1 col2\n0     2    a\n1     1    b\n2     3    c\n\n\n\npandas_df_py.sort_values('col1')\n\n   col1 col2\n1     1    b\n0     2    a\n2     3    c\n\n\n\n## filter using query fails both on console and rmarkdown\npandas_df_py.query('col1 &gt; 1.0')\n\n   col1 col2\n0     2    a\n2     3    c\n\n\n\n\nSource Python Script\nPersonally, the most convenient way to use Python code is to source a .py file. Even though interoperability is a great idea, keeping Python and R codes as separate as possible will save you from a lot of headache in the future (at least with the current implementation).\nWe can source any python file using source_python() function easily. Let’s name our python file triangle.py and write the following.\n\ndef area_of_triangle(h,x):\n  return h*x/2\n\n\narea_of_triangle(3,5)\n\n7.5\n\n\nFollow\n\nreticulate::source_python(\"triangle.py\") ### Remember to provide proper relative or absolute path.\n\nNote: For RMarkdown demonstration purposes below we;\n\ncreated a temporary file\nwrote our python function to that file using cat\nthen executed source_python\nthen called the function as R function\n\n\npyfile &lt;- tempfile(fileext = \".py\")\ncat(\"def area_of_triangle(h,x):\n  return h*x/2\", file = pyfile)\nsource_python(pyfile)\n\narea_of_triangle(3, 5)\n\n[1] 7.5\n\n\nBut deep down it is a Python function.\n\nprint(area_of_triangle)\n\n&lt;function area_of_triangle at 0x13f314f40&gt;\n\n\n\n\nConclusion\nTo be honest Python versioning is a mess. Lots of parallel versions (even python2 version issues are still looming) and conflicts in different layers of computing might be troublesome especially in Docker settings. Therefore it is highly recommended to add Python code to your R code if it is totally necessary.\nThough it is always a good thing to have an exquisite tool if you need to use Python and cannot separate processes. reticulate is currently that tool."
  },
  {
    "objectID": "dplyr-joins.html",
    "href": "dplyr-joins.html",
    "title": "Joins with dplyr",
    "section": "",
    "text": "Data Preparation\nThis part follows the notes of STAT 545 of Jenny Bryan\nlibrary(tidyverse) ## dplyr provides the join functions\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsuperheroes &lt;- tibble::tribble(\n    ~name, ~alignment, ~gender, ~publisher,\n    \"Magneto\", \"bad\", \"male\", \"Marvel\",\n    \"Storm\", \"good\", \"female\", \"Marvel\",\n    \"Mystique\", \"bad\", \"female\", \"Marvel\",\n    \"Batman\", \"good\", \"male\", \"DC\",\n    \"Joker\", \"bad\", \"male\", \"DC\",\n    \"Catwoman\", \"bad\", \"female\", \"DC\",\n    \"Hellboy\", \"good\", \"male\", \"Dark Horse Comics\"\n)\n\npublishers &lt;- tibble::tribble(\n    ~publisher, ~yr_founded,\n    \"DC\", 1934L,\n    \"Marvel\", 1939L,\n    \"Image\", 1992L\n)\nWe have two data sets. Our first data set (superheroes) contains information about fictional characters from graphic novels. There are 7 characters from different publishers. Information about those characters include name, alignment (good or bad), gender (male or female) and the publishers where they belong to.\nOur second data set is about publishers and the year they are founded. These two data sets are the perfect minimal example to introduce data table joins because they have a common (key) column and they have both similar and disparate values.\nprint(superheroes)\n\n# A tibble: 7 × 4\n  name     alignment gender publisher        \n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;            \n1 Magneto  bad       male   Marvel           \n2 Storm    good      female Marvel           \n3 Mystique bad       female Marvel           \n4 Batman   good      male   DC               \n5 Joker    bad       male   DC               \n6 Catwoman bad       female DC               \n7 Hellboy  good      male   Dark Horse Comics\n\nprint(publishers)\n\n# A tibble: 3 × 2\n  publisher yr_founded\n  &lt;chr&gt;          &lt;int&gt;\n1 DC              1934\n2 Marvel          1939\n3 Image           1992\nWe call data sets left and right (hence left join, right join), or X and Y (usually X denotes left and Y denotes right). Here we will use superheroes and publishers in different positions but usually superheroes will be on the left."
  },
  {
    "objectID": "dplyr-joins.html#left-join",
    "href": "dplyr-joins.html#left-join",
    "title": "Joins with dplyr",
    "section": "Left Join",
    "text": "Left Join\nIn left join, all rows of X are preserved, only relevant rows Y and multiply rows if there are multiple matchings.\n\nleft_join(superheroes, publishers, by = \"publisher\")\n\n# A tibble: 7 × 5\n  name     alignment gender publisher         yr_founded\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;                  &lt;int&gt;\n1 Magneto  bad       male   Marvel                  1939\n2 Storm    good      female Marvel                  1939\n3 Mystique bad       female Marvel                  1939\n4 Batman   good      male   DC                      1934\n5 Joker    bad       male   DC                      1934\n6 Catwoman bad       female DC                      1934\n7 Hellboy  good      male   Dark Horse Comics         NA\n\n\nRight join is the same as left join but the main data set is Y.\n\nright_join(superheroes, publishers, by = \"publisher\") %&gt;% arrange(name)\n\n# A tibble: 7 × 5\n  name     alignment gender publisher yr_founded\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;          &lt;int&gt;\n1 Batman   good      male   DC              1934\n2 Catwoman bad       female DC              1934\n3 Joker    bad       male   DC              1934\n4 Magneto  bad       male   Marvel          1939\n5 Mystique bad       female Marvel          1939\n6 Storm    good      female Marvel          1939\n7 &lt;NA&gt;     &lt;NA&gt;      &lt;NA&gt;   Image           1992\n\n\n\nleft_join(publishers, superheroes, by = \"publisher\") %&gt;%\n    arrange(name) %&gt;%\n    relocate(publisher, yr_founded, .after = gender)\n\n# A tibble: 7 × 5\n  name     alignment gender publisher yr_founded\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;          &lt;int&gt;\n1 Batman   good      male   DC              1934\n2 Catwoman bad       female DC              1934\n3 Joker    bad       male   DC              1934\n4 Magneto  bad       male   Marvel          1939\n5 Mystique bad       female Marvel          1939\n6 Storm    good      female Marvel          1939\n7 &lt;NA&gt;     &lt;NA&gt;      &lt;NA&gt;   Image           1992"
  },
  {
    "objectID": "dplyr-joins.html#inner-join",
    "href": "dplyr-joins.html#inner-join",
    "title": "Joins with dplyr",
    "section": "Inner Join",
    "text": "Inner Join\nIn inner join, only rows with common values are returned and rows are multiplied if there are multiple matchings.\n\ninner_join(superheroes, publishers, by = \"publisher\")\n\n# A tibble: 6 × 5\n  name     alignment gender publisher yr_founded\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;          &lt;int&gt;\n1 Magneto  bad       male   Marvel          1939\n2 Storm    good      female Marvel          1939\n3 Mystique bad       female Marvel          1939\n4 Batman   good      male   DC              1934\n5 Joker    bad       male   DC              1934\n6 Catwoman bad       female DC              1934"
  },
  {
    "objectID": "dplyr-joins.html#semi-join",
    "href": "dplyr-joins.html#semi-join",
    "title": "Joins with dplyr",
    "section": "Semi Join",
    "text": "Semi Join\nSemi Join is very similar to inner join but without columns from Y.\n\nsemi_join(superheroes, publishers, by = \"publisher\")\n\n# A tibble: 6 × 4\n  name     alignment gender publisher\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;    \n1 Magneto  bad       male   Marvel   \n2 Storm    good      female Marvel   \n3 Mystique bad       female Marvel   \n4 Batman   good      male   DC       \n5 Joker    bad       male   DC       \n6 Catwoman bad       female DC"
  },
  {
    "objectID": "dplyr-joins.html#full-join",
    "href": "dplyr-joins.html#full-join",
    "title": "Joins with dplyr",
    "section": "Full Join",
    "text": "Full Join\nFull join returns all rows and columns from both X and Y and both multiplies multiple matchings and compensates for missing matches.\n\nfull_join(superheroes, publishers, by = \"publisher\")\n\n# A tibble: 8 × 5\n  name     alignment gender publisher         yr_founded\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;                  &lt;int&gt;\n1 Magneto  bad       male   Marvel                  1939\n2 Storm    good      female Marvel                  1939\n3 Mystique bad       female Marvel                  1939\n4 Batman   good      male   DC                      1934\n5 Joker    bad       male   DC                      1934\n6 Catwoman bad       female DC                      1934\n7 Hellboy  good      male   Dark Horse Comics         NA\n8 &lt;NA&gt;     &lt;NA&gt;      &lt;NA&gt;   Image                   1992"
  },
  {
    "objectID": "dplyr-joins.html#anti-join",
    "href": "dplyr-joins.html#anti-join",
    "title": "Joins with dplyr",
    "section": "Anti Join",
    "text": "Anti Join\nAnti join returns all rows from X which do not have information (based on key column) in Y and returns only columns from X.\n\nanti_join(superheroes, publishers, by = \"publisher\")\n\n# A tibble: 1 × 4\n  name    alignment gender publisher        \n  &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;            \n1 Hellboy good      male   Dark Horse Comics"
  },
  {
    "objectID": "rvest.html",
    "href": "rvest.html",
    "title": "Website parsing with rvest",
    "section": "",
    "text": "What is rvest?\nrvest is a very useful R package to parse HTML files of web pages. Usually information is not directly provided in Excel files but embedded in one or more pages in a web site."
  },
  {
    "objectID": "rvest.html#main-sources",
    "href": "rvest.html#main-sources",
    "title": "Website parsing with rvest",
    "section": "Main sources",
    "text": "Main sources\n\nrvest main development page: https://rvest.tidyverse.org/\nTutorial on rvest, httr and RSelenium"
  },
  {
    "objectID": "rvest.html#rvest-usage-examples",
    "href": "rvest.html#rvest-usage-examples",
    "title": "Website parsing with rvest",
    "section": "rvest Usage Examples",
    "text": "rvest Usage Examples\nSince rvest is part of the tidyverse package we can easily use pipes with it.\n\nlibrary(tidyverse)\nlibrary(rvest)\n\nIn the first example, we will extract tables from BKM’s (Interbank Card Center) sectoral development reports (see the website). Let’s start with getting the web page.\n\nthe_url &lt;- \"https://bkm.com.tr/secilen-aya-ait-sektorel-gelisim/?filter_year=2020&filter_month=1&List=Listele\"\nhtml_obj &lt;- read_html(the_url)\n\nWhen we check the object itself, we see it is a bunch of html code. We are on a good path.\n\nhtml_obj\n\nWe can examine the html structure by using the powerful html_structure() function. Since it is a bit of verbose see for yourself.\n\nhtml_obj %&gt;% html_structure()\n\nWe can simply extract the table using html_table(). If you get an error about inconsistent fields, use parameter fill=TRUE.\n\n\n[[1]]\n# A tibble: 2 × 3\n  X1                               X2                               X3          \n  &lt;chr&gt;                            &lt;chr&gt;                            &lt;chr&gt;       \n1 SEÇİLEN AYA AİT SEKTÖREL GELİŞİM Seçilen Aya Ait Sektörel Gelişim Seçilen Aya…\n2 Seçilen Aya Ait Sektörel Gelişim &lt;NA&gt;                             &lt;NA&gt;        \n\n[[2]]\n# A tibble: 1 × 1\n  X1                              \n  &lt;chr&gt;                           \n1 Seçilen Aya Ait Sektörel Gelişim\n\n[[3]]\n# A tibble: 1 × 1\n  X1                                                                            \n  &lt;chr&gt;                                                                         \n1 \"Yıl:\\n                    2023202220212020201920182017201620152014Ay:\\n     …\n\n[[4]]\n# A tibble: 29 × 5\n   X1                                     X2                   X3    X4    X5   \n   &lt;chr&gt;                                  &lt;chr&gt;                &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 İşyeri Grubu                           İşlem Adedi          İşle… \"İşl… \"İşl…\n 2 İşyeri Grubu                           İşlem Adedi(Kredi K… İşle… \"İşl… \"İşl…\n 3 ARABA KİRALAMA                         341.271              70.9… \"212… \"23,…\n 4 ARAÇ KİRALAMA-SATIŞ/SERVİS/YEDEK PARÇA 3.497.791            969.… \"2.6… \"217…\n 5 BENZİN VE YAKIT İSTASYONLARI           27.488.661           11.6… \"5.6… \"1.0…\n 6 BIREYSEL EMEKLILIK                     2.078.609            2.043 \"771… \"1,0…\n 7 ÇEŞİTLİ GIDA                           33.777.181           21.5… \"5.2… \"1.1…\n 8 DOĞRUDAN PAZARLAMA                     627.712              60.3… \"728… \"11,…\n 9 EĞİTİM / KIRTASİYE / OFİS MALZEMELERİ  6.274.208            3.56… \"2.0… \"337…\n10 ELEKTRİK-ELEKTRONİK EŞYA, BİLGİSAYAR   8.809.733            2.60… \"4.1… \"522…\n# ℹ 19 more rows\n\n\n\nhtml_obj %&gt;% html_table(fill = TRUE)\n\nNow we are getting somewhere on the fourth item but it is not up to our quality standard. Let’s deploy dplyr functions to make it better.\n\nhtml_df &lt;- read_html(the_url) %&gt;%\n    html_table(fill = TRUE) %&gt;%\n    `[[`(4)\n\nhtml_df %&gt;%\n    # Since we do not have too many columns let's rename them manually\n    # number (num) or value (val) of transactions (txn)\n    # by credit card (cc) or debit card (dc)\n    rename(category = 1, num_txn_cc = 2, num_txn_dc = 3, val_txn_cc = 4, val_txn_dc = 5) %&gt;%\n    # remove the first two rows because they are actually titles\n    slice(-(1:2)) %&gt;%\n    # then convert every numeric value by using parse_number function from readr\n    mutate(\n        across(\n            -category,\n            ~ readr::parse_number(.,\n                locale = readr::locale(decimal_mark = \",\", grouping_mark = \".\")\n            )\n        )\n    )\n\n# A tibble: 27 × 5\n   category                          num_txn_cc num_txn_dc val_txn_cc val_txn_dc\n   &lt;chr&gt;                                  &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 ARABA KİRALAMA                        341271      70947       212.      23.2 \n 2 ARAÇ KİRALAMA-SATIŞ/SERVİS/YEDEK…    3497791     969202      2676.     217.  \n 3 BENZİN VE YAKIT İSTASYONLARI        27488661   11642138      5608.    1060.  \n 4 BIREYSEL EMEKLILIK                   2078609       2043       772.       1.03\n 5 ÇEŞİTLİ GIDA                        33777181   21569718      5284.    1124.  \n 6 DOĞRUDAN PAZARLAMA                    627712      60381       728.      11.2 \n 7 EĞİTİM / KIRTASİYE / OFİS MALZEM…    6274208    3565787      2044.     337.  \n 8 ELEKTRİK-ELEKTRONİK EŞYA, BİLGİS…    8809733    2609689      4185.     523.  \n 9 GİYİM VE AKSESUAR                   26750805   12487879      5670.    1957.  \n10 HAVAYOLLARI                          2013912     589812      2033.     755.  \n# ℹ 17 more rows\n\n\nIn the second example we will harvest the links from Istanbul’s Şehir Hatları (ferry line) domestic trips.\n\nhtml_obj &lt;- read_html(\"https://sehirhatlari.istanbul/en/timetables/domestic-trips\")\n\nLet’s get all the links using “a” nodes and “href” attributes. We are looking for “domestic trips” links.\n\nlinks_vec &lt;- html_obj %&gt;%\n    html_nodes(\"a\") %&gt;%\n    html_attr(\"href\")\nlinks_vec\n\n  [1] \"/en/corporate/privacy-and-cookie-policy-744\"                                                                             \n  [2] \"javascript:__doPostBack('ctl00$Cookie$btnCerezler','')\"                                                                  \n  [3] NA                                                                                                                        \n  [4] \"/tr\"                                                                                                                     \n  [5] \"/en\"                                                                                                                     \n  [6] \"#\"                                                                                                                       \n  [7] \"/en/corporate/sehir-hatlari-616\"                                                                                         \n  [8] \"/en/corporate/presidents-message-720\"                                                                                    \n  [9] \"/en/corporate/general-manager-721\"                                                                                       \n [10] \"/en/corporate/vision-and-values-217\"                                                                                     \n [11] \"/en/corporate/management-systems-policy-364\"                                                                             \n [12] \"#\"                                                                                                                       \n [13] \"/en/timetables/domestic-trips\"                                                                                           \n [14] \"/en/timetables/ferry-vehicle\"                                                                                            \n [15] \"/en/timetables/bosphorus-tours\"                                                                                          \n [16] \"/en/price-list\"                                                                                                          \n [17] \"/uploads/pdf/Sefer-Haritasi-Line-Map-2022.pdf\"                                                                           \n [18] \"#\"                                                                                                                       \n [19] \"/en/information/disabled-guests-186\"                                                                                     \n [20] \"/en/information/corporate-film-618\"                                                                                      \n [21] \"/en/frequently-asked-questions\"                                                                                          \n [22] \"#\"                                                                                                                       \n [23] \"/en/corporate/rental-services-208\"                                                                                       \n [24] \"/en/corporate/shipyard-services-617\"                                                                                     \n [25] \"/en/corporate/advertising-areas-209\"                                                                                     \n [26] \"/en/corporate/filming-210\"                                                                                               \n [27] \"#\"                                                                                                                       \n [28] \"/en/contact\"                                                                                                             \n [29] \"/en/applies\"                                                                                                             \n [30] \"https://twitter.com/sehir_hatlari\"                                                                                       \n [31] \"https://www.facebook.com/sehirhatlari\"                                                                                   \n [32] \"https://www.instagram.com/sehir_hatlari/\"                                                                                \n [33] \"https://www.youtube.com/user/sehirhatlari1\"                                                                              \n [34] NA                                                                                                                        \n [35] \"/tr\"                                                                                                                     \n [36] \"#\"                                                                                                                       \n [37] \"#\"                                                                                                                       \n [38] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines-26\"                                                             \n [39] \"/en/timetables/domestic-trips/bosphorus-lines-52\"                                                                        \n [40] \"/en/timetables/domestic-trips/adalar-princes-islands-lines-176\"                                                          \n [41] \"/en\"                                                                                                                     \n [42] \"/en/timetables\"                                                                                                          \n [43] \"#ichatlartarifeleri\"                                                                                                     \n [44] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines-26\"                                                             \n [45] \"/en/timetables/domestic-trips/bosphorus-lines-52\"                                                                        \n [46] \"/en/timetables/domestic-trips/adalar-princes-islands-lines-176\"                                                          \n [47] \"/en/timetables/ferry-vehicle\"                                                                                            \n [48] \"/en/timetables/bosphorus-tours\"                                                                                          \n [49] \"#ucrettarifeleri\"                                                                                                        \n [50] \"/en/price-list/ferry-lines-79\"                                                                                           \n [51] \"/en/price-list/bosphorus-tours-78\"                                                                                       \n [52] \"/en/price-list/ferry-vehicle-line-77\"                                                                                    \n [53] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-kabatas-766\"                                            \n [54] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-karakoy-eminonu-163\"                                    \n [55] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/uskudar-karakoy-eminonu-164\"                                    \n [56] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-besiktas-165\"                                           \n [57] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/halic-hatti-37\"                                                 \n [58] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-karakoy-besiktas-768\"                                   \n [59] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/bostanci-karakoy-kabatas-166\"                                   \n [60] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/asiyan-anadolu-hisari-kucuksu-circuit-line-2014\"                \n [61] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/uskudar-asiyan-2015\"                                            \n [62] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-kasimpasa-fener-haskoy-sutluce-eyupsultan-line-2017\"    \n [63] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/besiktas-kabatas-karakoy-kasimpasa-sutluce-eyupsultan-line-2019\"\n [64] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/cengelkoy-kabatas-line-2021\"                                    \n [65] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/bostanci-moda-kadikoy-kabatas-line-2024\"                        \n [66] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/avcilar-bakirkoy-yenikapi-kadikoy-line-2027\"                    \n [67] \"/en/timetables/domestic-trips/inner-istanbul-ferry-lines/avcilar-bostanci-line-2028\"                                     \n [68] \"/en/timetables/domestic-trips/bosphorus-lines/to-bosphorus-from-bosphorus-167\"                                           \n [69] \"/en/timetables/domestic-trips/bosphorus-lines/anadolu-kavagi-rumeli-kavagi-sariyer-168\"                                  \n [70] \"/en/timetables/domestic-trips/bosphorus-lines/kucuksu-besiktas-kabatas-169\"                                              \n [71] \"/en/timetables/domestic-trips/bosphorus-lines/cengelkoy-istinye-170\"                                                     \n [72] \"/en/timetables/domestic-trips/bosphorus-lines/kadikoy-sariyer-171\"                                                       \n [73] \"/en/timetables/domestic-trips/bosphorus-lines/anadolu-kavagi-uskudar-172\"                                                \n [74] \"/en/timetables/domestic-trips/bosphorus-lines/ortakoy-uskudar-kadikoy-173\"                                               \n [75] \"/en/timetables/domestic-trips/bosphorus-lines/rumeli-kavagi-eminonu-174\"                                                 \n [76] \"/en/timetables/domestic-trips/bosphorus-lines/kucuksu-istinye-175\"                                                       \n [77] \"/en/timetables/domestic-trips/bosphorus-lines/bebek-emirgan-595\"                                                         \n [78] \"/en/timetables/domestic-trips/bosphorus-lines/beykoz-sariyer-767\"                                                        \n [79] \"/en/timetables/domestic-trips/bosphorus-lines/ortakoy-besiktas-eminonu-2078\"                                             \n [80] \"/en/timetables/domestic-trips/adalar-princes-islands-lines/kabatas-adalar-177\"                                           \n [81] \"/en/timetables/domestic-trips/adalar-princes-islands-lines/adalar-besiktas-769\"                                          \n [82] \"/en/timetables/domestic-trips/adalar-princes-islands-lines/bostanci-adalar-circuit-line-770\"                             \n [83] \"/en/timetables/domestic-trips/adalar-princes-islands-lines/maltepe-buyukada-heybeliada-burgazada-kinaliada-lines-2020\"   \n [84] \"/uploads/dokuman/46-2/tarife.pdf\"                                                                                        \n [85] \"https://www.ibb.istanbul\"                                                                                                \n [86] \"tel:+153\"                                                                                                                \n [87] \"http://ibb.tv/yayin\"                                                                                                     \n [88] \"/en/corporate/sehir-hatlari-616\"                                                                                         \n [89] \"/en/corporate/presidents-message-720\"                                                                                    \n [90] \"/en/corporate/general-manager-721\"                                                                                       \n [91] \"/en/corporate/vision-and-values-217\"                                                                                     \n [92] \"/en/corporate/management-systems-policy-364\"                                                                             \n [93] \"/en/ferries\"                                                                                                             \n [94] \"/en/piers\"                                                                                                               \n [95] \"/en/journeys/domestic-trips\"                                                                                             \n [96] \"/en/journeys/bosphorus-tours\"                                                                                            \n [97] \"/en/journeys/ferry-vehicle\"                                                                                              \n [98] \"/en/price-list\"                                                                                                          \n [99] \"/en/information/disabled-guests-186\"                                                                                     \n[100] \"en/information/corporate-film-618\"                                                                                       \n[101] \"/en/frequently-asked-questions\"                                                                                          \n[102] \"/en/corporate/filming-210\"                                                                                               \n[103] \"/en/corporate/advertising-areas-209\"                                                                                     \n[104] \"/en/corporate/rental-services-208\"                                                                                       \n[105] \"/en/corporate/shipyard-services-617\"                                                                                     \n[106] \"/en/contact\"                                                                                                             \n[107] \"/en/applies\"                                                                                                             \n[108] \"http://www.sehirhatlari.com.tr/sanaltur/index.htm\"                                                                       \n[109] \"https://itunes.apple.com/tr/app/%C5%9Fehir-hatlar%C4%B1/id783673371?l=tr&mt=8\"                                           \n[110] \"https://play.google.com/store/apps/details?id=com.spexco.flexcoder2.sehirhatlari.activities&hl=tr\"                       \n[111] \"https://www.facebook.com/sehirhatlari\"                                                                                   \n[112] \"https://www.instagram.com/sehir_hatlari/\"                                                                                \n[113] \"https://twitter.com/sehir_hatlari\"                                                                                       \n[114] \"https://www.youtube.com/user/sehirhatlari1\"                                                                              \n[115] \"https://www.trios.com.tr\"                                                                                                \n\n\nWith a simple regex and adding the root url we can get all the relevant links from the web page.\n\ndomestic_trips_links &lt;- paste0(\"https://sehirhatlari.istanbul\", links_vec[grepl(\"/domestic-trips/\", links_vec)])\ndomestic_trips_links\n\n [1] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines-26\"                                                             \n [2] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines-52\"                                                                        \n [3] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines-176\"                                                          \n [4] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines-26\"                                                             \n [5] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines-52\"                                                                        \n [6] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines-176\"                                                          \n [7] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-kabatas-766\"                                            \n [8] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-karakoy-eminonu-163\"                                    \n [9] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/uskudar-karakoy-eminonu-164\"                                    \n[10] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-besiktas-165\"                                           \n[11] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/halic-hatti-37\"                                                 \n[12] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-karakoy-besiktas-768\"                                   \n[13] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/bostanci-karakoy-kabatas-166\"                                   \n[14] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/asiyan-anadolu-hisari-kucuksu-circuit-line-2014\"                \n[15] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/uskudar-asiyan-2015\"                                            \n[16] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-kasimpasa-fener-haskoy-sutluce-eyupsultan-line-2017\"    \n[17] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/besiktas-kabatas-karakoy-kasimpasa-sutluce-eyupsultan-line-2019\"\n[18] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/cengelkoy-kabatas-line-2021\"                                    \n[19] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/bostanci-moda-kadikoy-kabatas-line-2024\"                        \n[20] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/avcilar-bakirkoy-yenikapi-kadikoy-line-2027\"                    \n[21] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/avcilar-bostanci-line-2028\"                                     \n[22] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/to-bosphorus-from-bosphorus-167\"                                           \n[23] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/anadolu-kavagi-rumeli-kavagi-sariyer-168\"                                  \n[24] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/kucuksu-besiktas-kabatas-169\"                                              \n[25] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/cengelkoy-istinye-170\"                                                     \n[26] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/kadikoy-sariyer-171\"                                                       \n[27] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/anadolu-kavagi-uskudar-172\"                                                \n[28] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/ortakoy-uskudar-kadikoy-173\"                                               \n[29] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/rumeli-kavagi-eminonu-174\"                                                 \n[30] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/kucuksu-istinye-175\"                                                       \n[31] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/bebek-emirgan-595\"                                                         \n[32] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/beykoz-sariyer-767\"                                                        \n[33] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/ortakoy-besiktas-eminonu-2078\"                                             \n[34] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/kabatas-adalar-177\"                                           \n[35] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/adalar-besiktas-769\"                                          \n[36] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/bostanci-adalar-circuit-line-770\"                             \n[37] \"https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/maltepe-buyukada-heybeliada-burgazada-kinaliada-lines-2020\"   \n\n\nYou can click all the links below.\npaste0(\"+ \", domestic_trips_links, \" &lt;br&gt;\", collapse = \" \")\n[1] “+ https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines-26  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines-52  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines-176  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines-26  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines-52  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines-176  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-kabatas-766  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-karakoy-eminonu-163  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/uskudar-karakoy-eminonu-164  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-besiktas-165  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/halic-hatti-37  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-karakoy-besiktas-768  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/bostanci-karakoy-kabatas-166  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/asiyan-anadolu-hisari-kucuksu-circuit-line-2014  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/uskudar-asiyan-2015  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/kadikoy-kasimpasa-fener-haskoy-sutluce-eyupsultan-line-2017  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/besiktas-kabatas-karakoy-kasimpasa-sutluce-eyupsultan-line-2019  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/cengelkoy-kabatas-line-2021  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/bostanci-moda-kadikoy-kabatas-line-2024  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/avcilar-bakirkoy-yenikapi-kadikoy-line-2027  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/inner-istanbul-ferry-lines/avcilar-bostanci-line-2028  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/to-bosphorus-from-bosphorus-167  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/anadolu-kavagi-rumeli-kavagi-sariyer-168  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/kucuksu-besiktas-kabatas-169  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/cengelkoy-istinye-170  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/kadikoy-sariyer-171  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/anadolu-kavagi-uskudar-172  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/ortakoy-uskudar-kadikoy-173  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/rumeli-kavagi-eminonu-174  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/kucuksu-istinye-175  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/bebek-emirgan-595  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/beykoz-sariyer-767  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/bosphorus-lines/ortakoy-besiktas-eminonu-2078  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/kabatas-adalar-177  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/adalar-besiktas-769  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/bostanci-adalar-circuit-line-770  + https://sehirhatlari.istanbul/en/timetables/domestic-trips/adalar-princes-islands-lines/maltepe-buyukada-heybeliada-burgazada-kinaliada-lines-2020 ”"
  },
  {
    "objectID": "rvest.html#exercises",
    "href": "rvest.html#exercises",
    "title": "Website parsing with rvest",
    "section": "Exercises",
    "text": "Exercises\n\nCollect multiple periods from BKM page and create an analysis.\nCollect all timetables from Şehir Hatları domestic lines and create a timetable Shiny app."
  }
]